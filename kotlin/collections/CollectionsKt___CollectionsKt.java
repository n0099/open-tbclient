package kotlin.collections;

import androidx.exifinterface.media.ExifInterface;
import com.baidu.android.common.others.IStringUtil;
import com.baidu.android.common.others.lang.StringUtil;
import com.baidu.android.imsdk.internal.Constants;
import com.baidu.media.duplayer.LibsInfoDef;
import com.baidu.mobstat.Config;
import com.baidu.searchbox.cloudcontrol.request.CloudControlRequest;
import com.baidu.swan.gamecenter.appmanager.download.AppDownloadNetworkStateReceiver;
import com.baidu.tbadk.core.util.StringHelper;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.RandomAccess;
import java.util.Set;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1;
import kotlin.internal.HidesMembers;
import kotlin.internal.InlineOnly;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.random.Random;
import kotlin.ranges.IntRange;
import kotlin.ranges.RangesKt___RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt___SequencesKt;
import kotlin.text.StringsKt__StringBuilderKt;
@Metadata(bv = {1, 0, 3}, d1 = {"\u0000à\u0002\n\u0000\n\u0002\u0010\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u000b\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0006\n\u0002\u0010%\n\u0002\b\t\n\u0002\u0010\u0005\n\u0002\u0010\u0006\n\u0002\b\u0004\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001e\n\u0002\b\u001a\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\u0002\n\u0002\b\b\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0010\"\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0007\n\u0002\u0010\u000e\n\u0002\b\r\n\u0002\u0010\u000f\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\u0011\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\b\u001d\n\u0002\u0010\u0018\n\u0002\b\u0002\n\u0002\u0010\u0012\n\u0002\b\u0002\n\u0002\u0010\f\n\u0002\u0010\u0019\n\u0002\b\u0003\n\u0002\u0010\u0013\n\u0002\b\u0002\n\u0002\u0010\u0014\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0015\n\u0002\b\u0003\n\u0002\u0010\u0016\n\u0002\b\u0004\n\u0002\u0010#\n\u0002\b\u0003\n\u0002\u0010\u0017\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\b\b\u001a4\u0010\u0005\u001a\u00020\u0003\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0004\b\u0005\u0010\u0006\u001a\u001d\u0010\u0007\u001a\u00020\u0003\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0004\b\u0007\u0010\b\u001a4\u0010\u0007\u001a\u00020\u0003\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0004\b\u0007\u0010\u0006\u001a&\u0010\t\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0087\b¢\u0006\u0004\b\t\u0010\n\u001a#\u0010\f\u001a\b\u0012\u0004\u0012\u00028\u00000\u000b\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0004\b\f\u0010\r\u001aX\u0010\u0013\u001a\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u0012\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010\u000e\"\u0004\b\u0002\u0010\u000f*\b\u0012\u0004\u0012\u00028\u00000\u00012\u001e\u0010\u0011\u001a\u001a\u0012\u0004\u0012\u00028\u0000\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u00100\u0002H\u0086\b¢\u0006\u0004\b\u0013\u0010\u0014\u001aF\u0010\u0016\u001a\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010\u000e*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0002H\u0086\b¢\u0006\u0004\b\u0016\u0010\u0014\u001a`\u0010\u0016\u001a\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u0012\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010\u000e\"\u0004\b\u0002\u0010\u000f*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00022\u0012\u0010\u0017\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u0002H\u0086\b¢\u0006\u0004\b\u0016\u0010\u0018\u001a\\\u0010\u001c\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010\u000e\"\u0018\b\u0002\u0010\u001a*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00000\u0019*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00022\u0012\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0002H\u0086\b¢\u0006\u0004\b\u001c\u0010\u001d\u001av\u0010\u001c\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010\u000e\"\u0004\b\u0002\u0010\u000f\"\u0018\b\u0003\u0010\u001a*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020\u0019*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00032\u0012\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00022\u0012\u0010\u0017\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u0002H\u0086\b¢\u0006\u0004\b\u001c\u0010\u001e\u001an\u0010\u001f\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010\u000e\"\u0004\b\u0002\u0010\u000f\"\u0018\b\u0003\u0010\u001a*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020\u0019*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00032\u001e\u0010\u0011\u001a\u001a\u0012\u0004\u0012\u00028\u0000\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u00100\u0002H\u0086\b¢\u0006\u0004\b\u001f\u0010\u001d\u001aF\u0010!\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u000e\"\u0004\b\u0001\u0010\u000f*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010 \u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0002H\u0087\b¢\u0006\u0004\b!\u0010\u0014\u001a\\\u0010\"\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u000e\"\u0004\b\u0001\u0010\u000f\"\u0018\b\u0002\u0010\u001a*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u0019*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00022\u0012\u0010 \u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0002H\u0087\b¢\u0006\u0004\b\"\u0010\u001d\u001a\u0019\u0010'\u001a\u00020$*\b\u0012\u0004\u0012\u00020#0\u0001H\u0007¢\u0006\u0004\b%\u0010&\u001a\u0019\u0010'\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0001H\u0007¢\u0006\u0004\b(\u0010&\u001a\u0019\u0010'\u001a\u00020$*\b\u0012\u0004\u0012\u00020)0\u0001H\u0007¢\u0006\u0004\b*\u0010&\u001a\u0019\u0010'\u001a\u00020$*\b\u0012\u0004\u0012\u00020+0\u0001H\u0007¢\u0006\u0004\b,\u0010&\u001a\u0019\u0010'\u001a\u00020$*\b\u0012\u0004\u0012\u00020-0\u0001H\u0007¢\u0006\u0004\b.\u0010&\u001a\u0019\u0010'\u001a\u00020$*\b\u0012\u0004\u0012\u00020/0\u0001H\u0007¢\u0006\u0004\b0\u0010&\u001a3\u00103\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000202\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u00101\u001a\u00020+H\u0007¢\u0006\u0004\b3\u00104\u001aM\u00103\u001a\b\u0012\u0004\u0012\u00028\u000102\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u00101\u001a\u00020+2\u0018\u0010\u0011\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u000002\u0012\u0004\u0012\u00028\u00010\u0002H\u0007¢\u0006\u0004\b3\u00106\u001a \u00107\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u000002H\u0087\n¢\u0006\u0004\b7\u00108\u001a \u00109\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u000002H\u0087\n¢\u0006\u0004\b9\u00108\u001a \u0010:\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u000002H\u0087\n¢\u0006\u0004\b:\u00108\u001a \u0010;\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u000002H\u0087\n¢\u0006\u0004\b;\u00108\u001a \u0010<\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u000002H\u0087\n¢\u0006\u0004\b<\u00108\u001a-\u0010?\u001a\u00020\u0003\"\t\b\u0000\u0010\u0000¢\u0006\u0002\b=*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010>\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0004\b?\u0010@\u001a \u0010B\u001a\u00020+\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000AH\u0087\b¢\u0006\u0004\bB\u0010C\u001a\u001d\u0010B\u001a\u00020+\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0004\bB\u0010D\u001a4\u0010B\u001a\u00020+\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0004\bB\u0010E\u001a#\u0010F\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0004\bF\u0010G\u001a@\u0010I\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010\u000e*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010H\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0002H\u0086\b¢\u0006\u0004\bI\u0010J\u001a+\u0010L\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010K\u001a\u00020+¢\u0006\u0004\bL\u00104\u001a+\u0010M\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0006\u0010K\u001a\u00020+¢\u0006\u0004\bM\u0010N\u001a:\u0010O\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0004\bO\u0010P\u001a:\u0010Q\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0004\bQ\u0010J\u001a%\u0010S\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010R\u001a\u00020+¢\u0006\u0004\bS\u0010T\u001a(\u0010S\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0006\u0010R\u001a\u00020+H\u0087\b¢\u0006\u0004\bS\u0010U\u001a9\u0010W\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010R\u001a\u00020+2\u0012\u0010V\u001a\u000e\u0012\u0004\u0012\u00020+\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\bW\u0010X\u001a<\u0010W\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0006\u0010R\u001a\u00020+2\u0012\u0010V\u001a\u000e\u0012\u0004\u0012\u00020+\u0012\u0004\u0012\u00028\u00000\u0002H\u0087\b¢\u0006\u0004\bW\u0010Y\u001a'\u0010Z\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010R\u001a\u00020+¢\u0006\u0004\bZ\u0010T\u001a*\u0010Z\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0006\u0010R\u001a\u00020+H\u0087\b¢\u0006\u0004\bZ\u0010U\u001a:\u0010[\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0004\b[\u0010J\u001aO\u0010_\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110+¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(R\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\\H\u0086\b¢\u0006\u0004\b_\u0010`\u001ac\u0010c\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010b*\n\u0012\u0006\b\u0000\u0012\u00028\u00000a*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00012'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110+¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(R\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\\H\u0086\b¢\u0006\u0004\bc\u0010d\u001a+\u0010f\u001a\r\u0012\t\u0012\u00078\u0000¢\u0006\u0002\be02\"\u0006\b\u0000\u00105\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0001H\u0086\b¢\u0006\u0004\bf\u0010G\u001a:\u0010g\u001a\u00028\u0001\"\u0006\b\u0000\u00105\u0018\u0001\"\u0010\b\u0001\u0010b*\n\u0012\u0006\b\u0000\u0012\u00028\u00000a*\u0006\u0012\u0002\b\u00030\u00012\u0006\u0010\u001b\u001a\u00028\u0001H\u0086\b¢\u0006\u0004\bg\u0010h\u001a:\u0010i\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0004\bi\u0010J\u001a)\u0010k\u001a\b\u0012\u0004\u0012\u00028\u000002\"\b\b\u0000\u0010\u0000*\u00020j*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0001¢\u0006\u0004\bk\u0010G\u001a=\u0010l\u001a\u00028\u0000\"\u0010\b\u0000\u0010b*\n\u0012\u0006\b\u0000\u0012\u00028\u00010a\"\b\b\u0001\u0010\u0000*\u00020j*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u00012\u0006\u0010\u001b\u001a\u00028\u0000¢\u0006\u0004\bl\u0010h\u001aN\u0010m\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010b*\n\u0012\u0006\b\u0000\u0012\u00028\u00000a*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0004\bm\u0010n\u001aN\u0010o\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010b*\n\u0012\u0006\b\u0000\u0012\u00028\u00000a*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0004\bo\u0010n\u001a6\u0010p\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0087\b¢\u0006\u0004\bp\u0010q\u001a6\u0010r\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0087\b¢\u0006\u0004\br\u0010q\u001a6\u0010r\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0087\b¢\u0006\u0004\br\u0010s\u001a\u001d\u0010t\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0004\bt\u0010u\u001a4\u0010t\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0004\bt\u0010q\u001a\u001d\u0010t\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u000002¢\u0006\u0004\bt\u00108\u001a\u001f\u0010v\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0004\bv\u0010u\u001a6\u0010v\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0004\bv\u0010q\u001a\u001f\u0010v\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u000002¢\u0006\u0004\bv\u00108\u001aF\u0010w\u001a\b\u0012\u0004\u0012\u00028\u000102\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0018\u0010\u0011\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\u00010\u0002H\u0086\b¢\u0006\u0004\bw\u0010J\u001aZ\u0010x\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105\"\u0010\b\u0002\u0010b*\n\u0012\u0006\b\u0000\u0012\u00028\u00010a*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00022\u0018\u0010\u0011\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\u00010\u0002H\u0086\b¢\u0006\u0004\bx\u0010n\u001aW\u0010|\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010y\u001a\u00028\u00012'\u0010{\u001a#\u0012\u0013\u0012\u00118\u0001¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(z\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\\H\u0086\b¢\u0006\u0004\b|\u0010}\u001am\u0010\u007f\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010y\u001a\u00028\u00012<\u0010{\u001a8\u0012\u0013\u0012\u00110+¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(R\u0012\u0013\u0012\u00118\u0001¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(z\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010~H\u0086\b¢\u0006\u0005\b\u007f\u0010\u0080\u0001\u001aZ\u0010\u0081\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105*\b\u0012\u0004\u0012\u00028\u0000022\u0006\u0010y\u001a\u00028\u00012'\u0010{\u001a#\u0012\u0004\u0012\u00028\u0000\u0012\u0013\u0012\u00118\u0001¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(z\u0012\u0004\u0012\u00028\u00010\\H\u0086\b¢\u0006\u0006\b\u0081\u0001\u0010\u0082\u0001\u001ao\u0010\u0083\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105*\b\u0012\u0004\u0012\u00028\u0000022\u0006\u0010y\u001a\u00028\u00012<\u0010{\u001a8\u0012\u0013\u0012\u00110+¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(R\u0012\u0004\u0012\u00028\u0000\u0012\u0013\u0012\u00118\u0001¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(z\u0012\u0004\u0012\u00028\u00010~H\u0086\b¢\u0006\u0006\b\u0083\u0001\u0010\u0084\u0001\u001a:\u0010\u0087\u0001\u001a\u00030\u0085\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0014\u0010\u0086\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u0085\u00010\u0002H\u0087\b¢\u0006\u0006\b\u0087\u0001\u0010\u0088\u0001\u001aO\u0010\u0089\u0001\u001a\u00030\u0085\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012)\u0010\u0086\u0001\u001a$\u0012\u0013\u0012\u00110+¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(R\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u0085\u00010\\H\u0086\b¢\u0006\u0006\b\u0089\u0001\u0010\u008a\u0001\u001a>\u0010\u008b\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0006\u0010R\u001a\u00020+2\u0012\u0010V\u001a\u000e\u0012\u0004\u0012\u00020+\u0012\u0004\u0012\u00028\u00000\u0002H\u0087\b¢\u0006\u0005\b\u008b\u0001\u0010Y\u001a)\u0010\u008c\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0006\u0010R\u001a\u00020+¢\u0006\u0005\b\u008c\u0001\u0010U\u001aN\u0010\u008d\u0001\u001a\u0014\u0012\u0004\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u0000020\u0012\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010\u000e*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0002H\u0086\b¢\u0006\u0005\b\u008d\u0001\u0010\u0014\u001ah\u0010\u008d\u0001\u001a\u0014\u0012\u0004\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u0002020\u0012\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010\u000e\"\u0004\b\u0002\u0010\u000f*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00022\u0012\u0010\u0017\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u0002H\u0086\b¢\u0006\u0005\b\u008d\u0001\u0010\u0018\u001ac\u0010\u008f\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010\u000e\"\u001d\b\u0002\u0010\u001a*\u0017\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u008e\u00010\u0019*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00022\u0012\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0002H\u0086\b¢\u0006\u0005\b\u008f\u0001\u0010\u001d\u001a}\u0010\u008f\u0001\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010\u000e\"\u0004\b\u0002\u0010\u000f\"\u001d\b\u0003\u0010\u001a*\u0017\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00020\u008e\u00010\u0019*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00032\u0012\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00022\u0012\u0010\u0017\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u0002H\u0086\b¢\u0006\u0005\b\u008f\u0001\u0010\u001e\u001aL\u0010\u0091\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0090\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010\u000e*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0014\b\u0004\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0002H\u0087\b¢\u0006\u0006\b\u0091\u0001\u0010\u0092\u0001\u001a-\u0010\u0093\u0001\u001a\u00020+\"\t\b\u0000\u0010\u0000¢\u0006\u0002\b=*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010>\u001a\u00028\u0000¢\u0006\u0006\b\u0093\u0001\u0010\u0094\u0001\u001a-\u0010\u0093\u0001\u001a\u00020+\"\t\b\u0000\u0010\u0000¢\u0006\u0002\b=*\b\u0012\u0004\u0012\u00028\u0000022\u0006\u0010>\u001a\u00028\u0000¢\u0006\u0006\b\u0093\u0001\u0010\u0095\u0001\u001a6\u0010\u0096\u0001\u001a\u00020+\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0005\b\u0096\u0001\u0010E\u001a7\u0010\u0096\u0001\u001a\u00020+\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0006\b\u0096\u0001\u0010\u0097\u0001\u001a6\u0010\u0098\u0001\u001a\u00020+\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0005\b\u0098\u0001\u0010E\u001a7\u0010\u0098\u0001\u001a\u00020+\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0006\b\u0098\u0001\u0010\u0097\u0001\u001a9\u0010\u009b\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u009a\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\r\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0086\u0004¢\u0006\u0006\b\u009b\u0001\u0010\u009c\u0001\u001a\u008e\u0001\u0010§\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u000f\b\u0001\u0010\u009f\u0001*\b0\u009d\u0001j\u0003`\u009e\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0007\u0010 \u0001\u001a\u00028\u00012\n\b\u0002\u0010¢\u0001\u001a\u00030¡\u00012\n\b\u0002\u0010£\u0001\u001a\u00030¡\u00012\n\b\u0002\u0010¤\u0001\u001a\u00030¡\u00012\t\b\u0002\u0010¥\u0001\u001a\u00020+2\n\b\u0002\u0010¦\u0001\u001a\u00030¡\u00012\u0017\b\u0002\u0010\u0011\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030¡\u0001\u0018\u00010\u0002¢\u0006\u0006\b§\u0001\u0010¨\u0001\u001au\u0010ª\u0001\u001a\u00030©\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\n\b\u0002\u0010¢\u0001\u001a\u00030¡\u00012\n\b\u0002\u0010£\u0001\u001a\u00030¡\u00012\n\b\u0002\u0010¤\u0001\u001a\u00030¡\u00012\t\b\u0002\u0010¥\u0001\u001a\u00020+2\n\b\u0002\u0010¦\u0001\u001a\u00030¡\u00012\u0017\b\u0002\u0010\u0011\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030¡\u0001\u0018\u00010\u0002¢\u0006\u0006\bª\u0001\u0010«\u0001\u001a\u001f\u0010¬\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0005\b¬\u0001\u0010u\u001a6\u0010¬\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0005\b¬\u0001\u0010q\u001a\u001f\u0010¬\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u000002¢\u0006\u0005\b¬\u0001\u00108\u001a6\u0010¬\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0005\b¬\u0001\u0010s\u001a-\u0010\u00ad\u0001\u001a\u00020+\"\t\b\u0000\u0010\u0000¢\u0006\u0002\b=*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010>\u001a\u00028\u0000¢\u0006\u0006\b\u00ad\u0001\u0010\u0094\u0001\u001a-\u0010\u00ad\u0001\u001a\u00020+\"\t\b\u0000\u0010\u0000¢\u0006\u0002\b=*\b\u0012\u0004\u0012\u00028\u0000022\u0006\u0010>\u001a\u00028\u0000¢\u0006\u0006\b\u00ad\u0001\u0010\u0095\u0001\u001a!\u0010®\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0005\b®\u0001\u0010u\u001a8\u0010®\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0005\b®\u0001\u0010q\u001a!\u0010®\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u000002¢\u0006\u0005\b®\u0001\u00108\u001a8\u0010®\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0005\b®\u0001\u0010s\u001aB\u0010¯\u0001\u001a\b\u0012\u0004\u0012\u00028\u000102\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0002H\u0086\b¢\u0006\u0005\b¯\u0001\u0010J\u001aW\u0010°\u0001\u001a\b\u0012\u0004\u0012\u00028\u000102\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105*\b\u0012\u0004\u0012\u00028\u00000\u00012'\u0010\u0011\u001a#\u0012\u0013\u0012\u00110+¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(R\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\\H\u0086\b¢\u0006\u0005\b°\u0001\u0010`\u001a]\u0010±\u0001\u001a\b\u0012\u0004\u0012\u00028\u000102\"\u0004\b\u0000\u0010\u0000\"\b\b\u0001\u00105*\u00020j*\b\u0012\u0004\u0012\u00028\u00000\u00012)\u0010\u0011\u001a%\u0012\u0013\u0012\u00110+¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(R\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\\H\u0086\b¢\u0006\u0005\b±\u0001\u0010`\u001aq\u0010²\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\b\b\u0001\u00105*\u00020j\"\u0010\b\u0002\u0010b*\n\u0012\u0006\b\u0000\u0012\u00028\u00010a*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00022)\u0010\u0011\u001a%\u0012\u0013\u0012\u00110+¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(R\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\\H\u0086\b¢\u0006\u0005\b²\u0001\u0010d\u001ak\u0010³\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105\"\u0010\b\u0002\u0010b*\n\u0012\u0006\b\u0000\u0012\u00028\u00010a*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00022'\u0010\u0011\u001a#\u0012\u0013\u0012\u00110+¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(R\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\\H\u0086\b¢\u0006\u0005\b³\u0001\u0010d\u001aH\u0010´\u0001\u001a\b\u0012\u0004\u0012\u00028\u000102\"\u0004\b\u0000\u0010\u0000\"\b\b\u0001\u00105*\u00020j*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0014\u0010\u0011\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0002H\u0086\b¢\u0006\u0005\b´\u0001\u0010J\u001a\\\u0010µ\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\b\b\u0001\u00105*\u00020j\"\u0010\b\u0002\u0010b*\n\u0012\u0006\b\u0000\u0012\u00028\u00010a*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00022\u0014\u0010\u0011\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0002H\u0086\b¢\u0006\u0005\bµ\u0001\u0010n\u001aV\u0010¶\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105\"\u0010\b\u0002\u0010b*\n\u0012\u0006\b\u0000\u0012\u00028\u00010a*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u00022\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0002H\u0086\b¢\u0006\u0005\b¶\u0001\u0010n\u001a-\u0010¸\u0001\u001a\u0004\u0018\u00018\u0000\"\u000f\b\u0000\u0010\u0000*\t\u0012\u0004\u0012\u00028\u00000·\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0006\b¸\u0001\u0010¹\u0001\u001a\u001e\u0010¸\u0001\u001a\u0004\u0018\u00010$*\b\u0012\u0004\u0012\u00020$0\u0001H\u0007¢\u0006\u0006\b¸\u0001\u0010º\u0001\u001a\u001e\u0010¸\u0001\u001a\u0004\u0018\u00010)*\b\u0012\u0004\u0012\u00020)0\u0001H\u0007¢\u0006\u0006\b¸\u0001\u0010»\u0001\u001aI\u0010¼\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000\"\u000f\b\u0001\u00105*\t\u0012\u0004\u0012\u00028\u00010·\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010H\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0002H\u0086\b¢\u0006\u0005\b¼\u0001\u0010q\u001aA\u0010À\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u001d\u0010¿\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u00028\u00000½\u0001j\u000b\u0012\u0006\b\u0000\u0012\u00028\u0000`¾\u0001¢\u0006\u0006\bÀ\u0001\u0010Á\u0001\u001a-\u0010Â\u0001\u001a\u0004\u0018\u00018\u0000\"\u000f\b\u0000\u0010\u0000*\t\u0012\u0004\u0012\u00028\u00000·\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0006\bÂ\u0001\u0010¹\u0001\u001a\u001e\u0010Â\u0001\u001a\u0004\u0018\u00010$*\b\u0012\u0004\u0012\u00020$0\u0001H\u0007¢\u0006\u0006\bÂ\u0001\u0010º\u0001\u001a\u001e\u0010Â\u0001\u001a\u0004\u0018\u00010)*\b\u0012\u0004\u0012\u00020)0\u0001H\u0007¢\u0006\u0006\bÂ\u0001\u0010»\u0001\u001aI\u0010Ã\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000\"\u000f\b\u0001\u00105*\t\u0012\u0004\u0012\u00028\u00010·\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010H\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0002H\u0086\b¢\u0006\u0005\bÃ\u0001\u0010q\u001aA\u0010Ä\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u001d\u0010¿\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u00028\u00000½\u0001j\u000b\u0012\u0006\b\u0000\u0012\u00028\u0000`¾\u0001¢\u0006\u0006\bÄ\u0001\u0010Á\u0001\u001a1\u0010Å\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010>\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0006\bÅ\u0001\u0010Æ\u0001\u001a;\u0010Å\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0010\u0010È\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000Ç\u0001H\u0086\u0002¢\u0006\u0006\bÅ\u0001\u0010É\u0001\u001a8\u0010Å\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\r\u0010È\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0086\u0002¢\u0006\u0006\bÅ\u0001\u0010Ê\u0001\u001a8\u0010Å\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\r\u0010È\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u000bH\u0086\u0002¢\u0006\u0006\bÅ\u0001\u0010Ë\u0001\u001a1\u0010Ì\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010>\u001a\u00028\u0000H\u0087\b¢\u0006\u0006\bÌ\u0001\u0010Æ\u0001\u001a\u001f\u0010Í\u0001\u001a\u00020\u0003\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0005\bÍ\u0001\u0010\b\u001a6\u0010Í\u0001\u001a\u00020\u0003\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0005\bÍ\u0001\u0010\u0006\u001aC\u0010Î\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010b*\b\u0012\u0004\u0012\u00028\u00000\u0001*\u00028\u00012\u0014\u0010\u0086\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u0085\u00010\u0002H\u0087\b¢\u0006\u0006\bÎ\u0001\u0010Ï\u0001\u001aO\u0010Ð\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u000002\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u0000020\u0010\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0006\bÐ\u0001\u0010Ñ\u0001\u001a1\u0010Ò\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000A2\u0006\u0010>\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0006\bÒ\u0001\u0010Ó\u0001\u001a;\u0010Ò\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000A2\u0010\u0010È\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000Ç\u0001H\u0086\u0002¢\u0006\u0006\bÒ\u0001\u0010Ô\u0001\u001a8\u0010Ò\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000A2\r\u0010È\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0086\u0002¢\u0006\u0006\bÒ\u0001\u0010Õ\u0001\u001a8\u0010Ò\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000A2\r\u0010È\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u000bH\u0086\u0002¢\u0006\u0006\bÒ\u0001\u0010Ö\u0001\u001a1\u0010Ò\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010>\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0006\bÒ\u0001\u0010Æ\u0001\u001a;\u0010Ò\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0010\u0010È\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000Ç\u0001H\u0086\u0002¢\u0006\u0006\bÒ\u0001\u0010É\u0001\u001a8\u0010Ò\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\r\u0010È\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0086\u0002¢\u0006\u0006\bÒ\u0001\u0010Ê\u0001\u001a8\u0010Ò\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\r\u0010È\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u000bH\u0086\u0002¢\u0006\u0006\bÒ\u0001\u0010Ë\u0001\u001a1\u0010×\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000A2\u0006\u0010>\u001a\u00028\u0000H\u0087\b¢\u0006\u0006\b×\u0001\u0010Ó\u0001\u001a1\u0010×\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010>\u001a\u00028\u0000H\u0087\b¢\u0006\u0006\b×\u0001\u0010Æ\u0001\u001a#\u0010Ø\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000AH\u0087\b¢\u0006\u0006\bØ\u0001\u0010Ù\u0001\u001a,\u0010Ø\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000A2\b\u0010Ø\u0001\u001a\u00030Ú\u0001H\u0007¢\u0006\u0006\bØ\u0001\u0010Û\u0001\u001aW\u0010Ý\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010Ü\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00012'\u0010{\u001a#\u0012\u0013\u0012\u00118\u0000¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(z\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\\H\u0086\b¢\u0006\u0006\bÝ\u0001\u0010Þ\u0001\u001al\u0010ß\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010Ü\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00012<\u0010{\u001a8\u0012\u0013\u0012\u00110+¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(R\u0012\u0013\u0012\u00118\u0000¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(z\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000~H\u0086\b¢\u0006\u0006\bß\u0001\u0010à\u0001\u001aW\u0010á\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010Ü\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u0001022'\u0010{\u001a#\u0012\u0004\u0012\u00028\u0001\u0012\u0013\u0012\u00118\u0000¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(z\u0012\u0004\u0012\u00028\u00000\\H\u0086\b¢\u0006\u0006\bá\u0001\u0010â\u0001\u001al\u0010ã\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010Ü\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u0001022<\u0010{\u001a8\u0012\u0013\u0012\u00110+¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(R\u0012\u0004\u0012\u00028\u0001\u0012\u0013\u0012\u00118\u0000¢\u0006\f\b]\u0012\b\b^\u0012\u0004\b\b(z\u0012\u0004\u0012\u00028\u00000~H\u0086\b¢\u0006\u0006\bã\u0001\u0010ä\u0001\u001a+\u0010å\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\b\b\u0000\u0010\u0000*\u00020j*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0001¢\u0006\u0005\bå\u0001\u0010\n\u001a,\u0010å\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\b\b\u0000\u0010\u0000*\u00020j*\n\u0012\u0006\u0012\u0004\u0018\u00018\u000002¢\u0006\u0006\bå\u0001\u0010æ\u0001\u001a%\u0010ç\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0005\bç\u0001\u0010G\u001a\u001f\u0010è\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0005\bè\u0001\u0010u\u001a6\u0010è\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0005\bè\u0001\u0010q\u001a\u001f\u0010è\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u000002¢\u0006\u0005\bè\u0001\u00108\u001a!\u0010é\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0005\bé\u0001\u0010u\u001a8\u0010é\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0005\bé\u0001\u0010q\u001a!\u0010é\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u000002¢\u0006\u0005\bé\u0001\u00108\u001a5\u0010ë\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\r\u0010ê\u0001\u001a\b\u0012\u0004\u0012\u00020+0\u0001¢\u0006\u0006\bë\u0001\u0010ì\u0001\u001a0\u0010ë\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\b\u0010ê\u0001\u001a\u00030í\u0001¢\u0006\u0006\bë\u0001\u0010î\u0001\u001aN\u0010ï\u0001\u001a\u00030\u0085\u0001\"\u0004\b\u0000\u0010\u0000\"\u000f\b\u0001\u00105*\t\u0012\u0004\u0012\u00028\u00010·\u0001*\t\u0012\u0004\u0012\u00028\u00000\u008e\u00012\u0016\b\u0004\u0010H\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0002H\u0086\b¢\u0006\u0006\bï\u0001\u0010ð\u0001\u001aN\u0010ñ\u0001\u001a\u00030\u0085\u0001\"\u0004\b\u0000\u0010\u0000\"\u000f\b\u0001\u00105*\t\u0012\u0004\u0012\u00028\u00010·\u0001*\t\u0012\u0004\u0012\u00028\u00000\u008e\u00012\u0016\b\u0004\u0010H\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0002H\u0086\b¢\u0006\u0006\bñ\u0001\u0010ð\u0001\u001a-\u0010ò\u0001\u001a\u00030\u0085\u0001\"\u000f\b\u0000\u0010\u0000*\t\u0012\u0004\u0012\u00028\u00000·\u0001*\t\u0012\u0004\u0012\u00028\u00000\u008e\u0001¢\u0006\u0006\bò\u0001\u0010ó\u0001\u001a0\u0010ô\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u000f\b\u0000\u0010\u0000*\t\u0012\u0004\u0012\u00028\u00000·\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0005\bô\u0001\u0010G\u001aQ\u0010õ\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000\"\u000f\b\u0001\u00105*\t\u0012\u0004\u0012\u00028\u00010·\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0016\b\u0004\u0010H\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0002H\u0086\b¢\u0006\u0005\bõ\u0001\u0010J\u001aQ\u0010ö\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000\"\u000f\b\u0001\u00105*\t\u0012\u0004\u0012\u00028\u00010·\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0016\b\u0004\u0010H\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0002H\u0086\b¢\u0006\u0005\bö\u0001\u0010J\u001a0\u0010÷\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u000f\b\u0000\u0010\u0000*\t\u0012\u0004\u0012\u00028\u00000·\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0005\b÷\u0001\u0010G\u001aE\u0010ø\u0001\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u001d\u0010¿\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u00028\u00000½\u0001j\u000b\u0012\u0006\b\u0000\u0012\u00028\u0000`¾\u0001¢\u0006\u0006\bø\u0001\u0010ù\u0001\u001a9\u0010ú\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u009a\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\r\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0086\u0004¢\u0006\u0006\bú\u0001\u0010\u009c\u0001\u001a\u001b\u0010ü\u0001\u001a\u00020+*\b\u0012\u0004\u0012\u00020#0\u0001H\u0007¢\u0006\u0005\bû\u0001\u0010D\u001a\u001b\u0010ü\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0001H\u0007¢\u0006\u0005\bý\u0001\u0010&\u001a\u001c\u0010ü\u0001\u001a\u00020)*\b\u0012\u0004\u0012\u00020)0\u0001H\u0007¢\u0006\u0006\bþ\u0001\u0010ÿ\u0001\u001a\u001b\u0010ü\u0001\u001a\u00020+*\b\u0012\u0004\u0012\u00020+0\u0001H\u0007¢\u0006\u0005\b\u0080\u0002\u0010D\u001a\u001c\u0010ü\u0001\u001a\u00020-*\b\u0012\u0004\u0012\u00020-0\u0001H\u0007¢\u0006\u0006\b\u0081\u0002\u0010\u0082\u0002\u001a\u001b\u0010ü\u0001\u001a\u00020+*\b\u0012\u0004\u0012\u00020/0\u0001H\u0007¢\u0006\u0005\b\u0083\u0002\u0010D\u001a6\u0010\u0084\u0002\u001a\u00020+\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010H\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020+0\u0002H\u0086\b¢\u0006\u0005\b\u0084\u0002\u0010E\u001a7\u0010\u0085\u0002\u001a\u00020$\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010H\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020$0\u0002H\u0086\b¢\u0006\u0006\b\u0085\u0002\u0010\u0086\u0002\u001a-\u0010\u0087\u0002\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010K\u001a\u00020+¢\u0006\u0005\b\u0087\u0002\u00104\u001a-\u0010\u0088\u0002\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0006\u0010K\u001a\u00020+¢\u0006\u0005\b\u0088\u0002\u0010N\u001a<\u0010\u0089\u0002\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u0000022\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0005\b\u0089\u0002\u0010P\u001a<\u0010\u008a\u0002\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00030\u0002H\u0086\b¢\u0006\u0005\b\u008a\u0002\u0010J\u001a\u001b\u0010\u008c\u0002\u001a\u00030\u008b\u0002*\b\u0012\u0004\u0012\u00020\u00030A¢\u0006\u0006\b\u008c\u0002\u0010\u008d\u0002\u001a\u001b\u0010\u008f\u0002\u001a\u00030\u008e\u0002*\b\u0012\u0004\u0012\u00020#0A¢\u0006\u0006\b\u008f\u0002\u0010\u0090\u0002\u001a\u001c\u0010\u0093\u0002\u001a\u00030\u0092\u0002*\t\u0012\u0005\u0012\u00030\u0091\u00020A¢\u0006\u0006\b\u0093\u0002\u0010\u0094\u0002\u001a9\u0010\u0095\u0002\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010b*\n\u0012\u0006\b\u0000\u0012\u00028\u00000a*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u001b\u001a\u00028\u0001¢\u0006\u0005\b\u0095\u0002\u0010h\u001a\u001b\u0010\u0097\u0002\u001a\u00030\u0096\u0002*\b\u0012\u0004\u0012\u00020$0A¢\u0006\u0006\b\u0097\u0002\u0010\u0098\u0002\u001a\u001b\u0010\u009a\u0002\u001a\u00030\u0099\u0002*\b\u0012\u0004\u0012\u00020)0A¢\u0006\u0006\b\u009a\u0002\u0010\u009b\u0002\u001a2\u0010\u009e\u0002\u001a\u0014\u0012\u0004\u0012\u00028\u00000\u009c\u0002j\t\u0012\u0004\u0012\u00028\u0000`\u009d\u0002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0006\b\u009e\u0002\u0010\u009f\u0002\u001a\u001b\u0010¡\u0002\u001a\u00030 \u0002*\b\u0012\u0004\u0012\u00020+0A¢\u0006\u0006\b¡\u0002\u0010¢\u0002\u001a%\u0010£\u0002\u001a\b\u0012\u0004\u0012\u00028\u000002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0005\b£\u0002\u0010G\u001a\u001b\u0010¥\u0002\u001a\u00030¤\u0002*\b\u0012\u0004\u0012\u00020-0A¢\u0006\u0006\b¥\u0002\u0010¦\u0002\u001a'\u0010§\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u008e\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000A¢\u0006\u0006\b§\u0002\u0010¨\u0002\u001a&\u0010§\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u008e\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0005\b§\u0002\u0010G\u001a'\u0010ª\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000©\u0002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0006\bª\u0002\u0010«\u0002\u001a'\u0010¬\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u009a\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0006\b¬\u0002\u0010«\u0002\u001a\u001b\u0010®\u0002\u001a\u00030\u00ad\u0002*\b\u0012\u0004\u0012\u00020/0A¢\u0006\u0006\b®\u0002\u0010¯\u0002\u001a9\u0010°\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u009a\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\r\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0086\u0004¢\u0006\u0006\b°\u0002\u0010\u009c\u0001\u001aL\u0010³\u0002\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000202\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u00101\u001a\u00020+2\t\b\u0002\u0010±\u0002\u001a\u00020+2\t\b\u0002\u0010²\u0002\u001a\u00020\u0003H\u0007¢\u0006\u0006\b³\u0002\u0010´\u0002\u001af\u0010³\u0002\u001a\b\u0012\u0004\u0012\u00028\u000102\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u00101\u001a\u00020+2\t\b\u0002\u0010±\u0002\u001a\u00020+2\t\b\u0002\u0010²\u0002\u001a\u00020\u00032\u0018\u0010\u0011\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u000002\u0012\u0004\u0012\u00028\u00010\u0002H\u0007¢\u0006\u0006\b³\u0002\u0010µ\u0002\u001a,\u0010·\u0002\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000¶\u00020\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001¢\u0006\u0005\b·\u0002\u0010\n\u001aM\u0010¸\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u001002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0010\u0010\u0099\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00010Ç\u0001H\u0086\u0004¢\u0006\u0006\b¸\u0002\u0010É\u0001\u001a\u0081\u0001\u0010¸\u0002\u001a\b\u0012\u0004\u0012\u00028\u000202\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105\"\u0004\b\u0002\u0010\u000f*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0010\u0010\u0099\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00010Ç\u000128\u0010\u0011\u001a4\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b]\u0012\t\b^\u0012\u0005\b\b(¹\u0002\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b]\u0012\t\b^\u0012\u0005\b\b(º\u0002\u0012\u0004\u0012\u00028\u00020\\H\u0086\b¢\u0006\u0006\b¸\u0002\u0010»\u0002\u001aJ\u0010¸\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u001002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105*\b\u0012\u0004\u0012\u00028\u00000\u00012\r\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001H\u0086\u0004¢\u0006\u0006\b¸\u0002\u0010Ê\u0001\u001a~\u0010¸\u0002\u001a\b\u0012\u0004\u0012\u00028\u000202\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105\"\u0004\b\u0002\u0010\u000f*\b\u0012\u0004\u0012\u00028\u00000\u00012\r\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u000128\u0010\u0011\u001a4\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b]\u0012\t\b^\u0012\u0005\b\b(¹\u0002\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b]\u0012\t\b^\u0012\u0005\b\b(º\u0002\u0012\u0004\u0012\u00028\u00020\\H\u0086\b¢\u0006\u0006\b¸\u0002\u0010¼\u0002\u001a3\u0010½\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00000\u001002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0007¢\u0006\u0005\b½\u0002\u0010G\u001ah\u0010½\u0002\u001a\b\u0012\u0004\u0012\u00028\u000102\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u00105*\b\u0012\u0004\u0012\u00028\u00000\u000128\u0010\u0011\u001a4\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b]\u0012\t\b^\u0012\u0005\b\b(¹\u0002\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b]\u0012\t\b^\u0012\u0005\b\b(º\u0002\u0012\u0004\u0012\u00028\u00010\\H\u0087\b¢\u0006\u0005\b½\u0002\u0010`¨\u0006¾\u0002"}, d2 = {ExifInterface.GPS_DIRECTION_TRUE, "", "Lkotlin/Function1;", "", "predicate", "all", "(Ljava/lang/Iterable;Lkotlin/Function1;)Z", "any", "(Ljava/lang/Iterable;)Z", "asIterable", "(Ljava/lang/Iterable;)Ljava/lang/Iterable;", "Lkotlin/sequences/Sequence;", "asSequence", "(Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;", "K", ExifInterface.GPS_MEASUREMENT_INTERRUPTED, "Lkotlin/Pair;", "transform", "", "associate", "(Ljava/lang/Iterable;Lkotlin/Function1;)Ljava/util/Map;", "keySelector", "associateBy", "valueTransform", "(Ljava/lang/Iterable;Lkotlin/Function1;Lkotlin/Function1;)Ljava/util/Map;", "", "M", "destination", "associateByTo", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "valueSelector", "associateWith", "associateWithTo", "", "", "averageOfByte", "(Ljava/lang/Iterable;)D", "average", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "size", "", "chunked", "(Ljava/lang/Iterable;I)Ljava/util/List;", "R", "(Ljava/lang/Iterable;ILkotlin/Function1;)Ljava/util/List;", "component1", "(Ljava/util/List;)Ljava/lang/Object;", "component2", "component3", "component4", "component5", "Lkotlin/internal/OnlyInputTypes;", "element", "contains", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "", "count", "(Ljava/util/Collection;)I", "(Ljava/lang/Iterable;)I", "(Ljava/lang/Iterable;Lkotlin/Function1;)I", "distinct", "(Ljava/lang/Iterable;)Ljava/util/List;", "selector", "distinctBy", "(Ljava/lang/Iterable;Lkotlin/Function1;)Ljava/util/List;", "n", "drop", "dropLast", "(Ljava/util/List;I)Ljava/util/List;", "dropLastWhile", "(Ljava/util/List;Lkotlin/Function1;)Ljava/util/List;", "dropWhile", "index", "elementAt", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "(Ljava/util/List;I)Ljava/lang/Object;", "defaultValue", "elementAtOrElse", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Ljava/util/List;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", CloudControlRequest.REQUEST_KEY_FILTER, "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexed", "(Ljava/lang/Iterable;Lkotlin/Function2;)Ljava/util/List;", "", "C", "filterIndexedTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "Lkotlin/internal/NoInfer;", "filterIsInstance", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "", "filterNotNull", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", Config.TRACE_VISIT_FIRST, "(Ljava/lang/Iterable;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "initial", "acc", AppDownloadNetworkStateReceiver.KEY_OPERATION, "fold", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "Lkotlin/Function3;", "foldIndexed", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "", "action", "forEach", "(Ljava/lang/Iterable;Lkotlin/Function1;)V", "forEachIndexed", "(Ljava/lang/Iterable;Lkotlin/Function2;)V", "getOrElse", "getOrNull", "groupBy", "", "groupByTo", "Lkotlin/collections/Grouping;", "groupingBy", "(Ljava/lang/Iterable;Lkotlin/Function1;)Lkotlin/collections/Grouping;", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "(Ljava/util/List;Lkotlin/Function1;)I", "indexOfLast", "other", "", "intersect", "(Ljava/lang/Iterable;Ljava/lang/Iterable;)Ljava/util/Set;", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", ExifInterface.GPS_MEASUREMENT_IN_PROGRESS, "buffer", "", "separator", "prefix", "postfix", Constants.EXTRA_CONFIG_LIMIT, "truncated", "joinTo", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "", "joinToString", "(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/Function1;)Ljava/lang/String;", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "", "max", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "maxBy", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "comparator", "maxWith", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "", "elements", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "(Ljava/lang/Iterable;Ljava/lang/Iterable;)Ljava/util/List;", "(Ljava/lang/Iterable;Lkotlin/sequences/Sequence;)Ljava/util/List;", "minusElement", "none", "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", "partition", "(Ljava/lang/Iterable;Lkotlin/Function1;)Lkotlin/Pair;", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;Ljava/lang/Iterable;)Ljava/util/List;", "(Ljava/util/Collection;Lkotlin/sequences/Sequence;)Ljava/util/List;", "plusElement", "random", "(Ljava/util/Collection;)Ljava/lang/Object;", "Lkotlin/random/Random;", "(Ljava/util/Collection;Lkotlin/random/Random;)Ljava/lang/Object;", ExifInterface.LATITUDE_SOUTH, "reduce", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "requireNoNulls", "(Ljava/util/List;)Ljava/util/List;", "reversed", "single", "singleOrNull", "indices", "slice", "(Ljava/util/List;Ljava/lang/Iterable;)Ljava/util/List;", "Lkotlin/ranges/IntRange;", "(Ljava/util/List;Lkotlin/ranges/IntRange;)Ljava/util/List;", "sortBy", "(Ljava/util/List;Lkotlin/Function1;)V", "sortByDescending", "sortDescending", "(Ljava/util/List;)V", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/util/List;", "subtract", "sumOfByte", "sum", "sumOfDouble", "sumOfFloat", "(Ljava/lang/Iterable;)F", "sumOfInt", "sumOfLong", "(Ljava/lang/Iterable;)J", "sumOfShort", "sumBy", "sumByDouble", "(Ljava/lang/Iterable;Lkotlin/Function1;)D", "take", "takeLast", "takeLastWhile", "takeWhile", "", "toBooleanArray", "(Ljava/util/Collection;)[Z", "", "toByteArray", "(Ljava/util/Collection;)[B", "", "", "toCharArray", "(Ljava/util/Collection;)[C", "toCollection", "", "toDoubleArray", "(Ljava/util/Collection;)[D", "", "toFloatArray", "(Ljava/util/Collection;)[F", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toHashSet", "(Ljava/lang/Iterable;)Ljava/util/HashSet;", "", "toIntArray", "(Ljava/util/Collection;)[I", "toList", "", "toLongArray", "(Ljava/util/Collection;)[J", "toMutableList", "(Ljava/util/Collection;)Ljava/util/List;", "", "toMutableSet", "(Ljava/lang/Iterable;)Ljava/util/Set;", "toSet", "", "toShortArray", "(Ljava/util/Collection;)[S", "union", "step", "partialWindows", "windowed", "(Ljava/lang/Iterable;IIZ)Ljava/util/List;", "(Ljava/lang/Iterable;IIZLkotlin/Function1;)Ljava/util/List;", "Lkotlin/collections/IndexedValue;", "withIndex", "zip", "a", "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "(Ljava/lang/Iterable;Ljava/lang/Iterable;Lkotlin/Function2;)Ljava/util/List;", "zipWithNext", "kotlin-stdlib"}, k = 5, mv = {1, 1, 15}, pn = "", xi = 0, xs = "kotlin/collections/CollectionsKt")
/* loaded from: classes7.dex */
public class CollectionsKt___CollectionsKt extends CollectionsKt___CollectionsJvmKt {
    /* JADX DEBUG: Type inference failed for r0v2. Raw type applied. Possible types: T, ? super T */
    public static final <T> boolean all(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        if ((iterable instanceof Collection) && ((Collection) iterable).isEmpty()) {
            return true;
        }
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (!function1.invoke((T) it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean any(Iterable<? extends T> iterable) {
        return iterable instanceof Collection ? !((Collection) iterable).isEmpty() : iterable.iterator().hasNext();
    }

    /* JADX DEBUG: Multi-variable search result rejected for r0v0, resolved type: java.lang.Iterable<? extends T> */
    /* JADX WARN: Multi-variable type inference failed */
    @InlineOnly
    public static final <T> Iterable<T> asIterable(Iterable<? extends T> iterable) {
        return iterable;
    }

    public static final <T> Sequence<T> asSequence(final Iterable<? extends T> iterable) {
        return new Sequence<T>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$asSequence$$inlined$Sequence$1
            @Override // kotlin.sequences.Sequence
            public Iterator<T> iterator() {
                return iterable.iterator();
            }
        };
    }

    /* JADX DEBUG: Type inference failed for r0v5. Raw type applied. Possible types: T, ? super T */
    public static final <T, K, V> Map<K, V> associate(Iterable<? extends T> iterable, Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap(RangesKt___RangesKt.coerceAtLeast(MapsKt__MapsKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10)), 16));
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Pair<? extends K, ? extends V> invoke = function1.invoke((T) it.next());
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    public static final <T, K> Map<K, T> associateBy(Iterable<? extends T> iterable, Function1<? super T, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap(RangesKt___RangesKt.coerceAtLeast(MapsKt__MapsKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10)), 16));
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            linkedHashMap.put(function1.invoke(obj), obj);
        }
        return linkedHashMap;
    }

    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(Iterable<? extends T> iterable, M m, Function1<? super T, ? extends K> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            m.put(function1.invoke(obj), obj);
        }
        return m;
    }

    /* JADX DEBUG: Type inference failed for r0v1. Raw type applied. Possible types: T, ? super T */
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(Iterable<? extends T> iterable, M m, Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Pair<? extends K, ? extends V> invoke = function1.invoke((T) it.next());
            m.put(invoke.getFirst(), invoke.getSecond());
        }
        return m;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r0v0, resolved type: java.util.LinkedHashMap */
    /* JADX WARN: Multi-variable type inference failed */
    @SinceKotlin(version = "1.3")
    public static final <K, V> Map<K, V> associateWith(Iterable<? extends K> iterable, Function1<? super K, ? extends V> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap(RangesKt___RangesKt.coerceAtLeast(MapsKt__MapsKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10)), 16));
        Iterator<? extends K> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (K) it.next();
            linkedHashMap.put(obj, function1.invoke(obj));
        }
        return linkedHashMap;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r3v0, resolved type: M extends java.util.Map<? super K, ? super V> */
    /* JADX WARN: Multi-variable type inference failed */
    @SinceKotlin(version = "1.3")
    public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(Iterable<? extends K> iterable, M m, Function1<? super K, ? extends V> function1) {
        Iterator<? extends K> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (K) it.next();
            m.put(obj, function1.invoke(obj));
        }
        return m;
    }

    @JvmName(name = "averageOfByte")
    public static final double averageOfByte(Iterable<Byte> iterable) {
        double d2 = 0.0d;
        int i = 0;
        for (Byte b2 : iterable) {
            d2 += b2.byteValue();
            i++;
            if (i < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : d2 / i;
    }

    @JvmName(name = "averageOfDouble")
    public static final double averageOfDouble(Iterable<Double> iterable) {
        double d2 = 0.0d;
        int i = 0;
        for (Double d3 : iterable) {
            d2 += d3.doubleValue();
            i++;
            if (i < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : d2 / i;
    }

    @JvmName(name = "averageOfFloat")
    public static final double averageOfFloat(Iterable<Float> iterable) {
        double d2 = 0.0d;
        int i = 0;
        for (Float f2 : iterable) {
            d2 += f2.floatValue();
            i++;
            if (i < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : d2 / i;
    }

    @JvmName(name = "averageOfInt")
    public static final double averageOfInt(Iterable<Integer> iterable) {
        double d2 = 0.0d;
        int i = 0;
        for (Integer num : iterable) {
            d2 += num.intValue();
            i++;
            if (i < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : d2 / i;
    }

    @JvmName(name = "averageOfLong")
    public static final double averageOfLong(Iterable<Long> iterable) {
        double d2 = 0.0d;
        int i = 0;
        for (Long l : iterable) {
            d2 += l.longValue();
            i++;
            if (i < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : d2 / i;
    }

    @JvmName(name = "averageOfShort")
    public static final double averageOfShort(Iterable<Short> iterable) {
        double d2 = 0.0d;
        int i = 0;
        for (Short sh : iterable) {
            d2 += sh.shortValue();
            i++;
            if (i < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : d2 / i;
    }

    @SinceKotlin(version = LibsInfoDef.CYBER_VIDEO_SR_MODEL_VERSION)
    public static final <T> List<List<T>> chunked(Iterable<? extends T> iterable, int i) {
        return windowed(iterable, i, i, true);
    }

    @InlineOnly
    public static final <T> T component1(List<? extends T> list) {
        return list.get(0);
    }

    @InlineOnly
    public static final <T> T component2(List<? extends T> list) {
        return list.get(1);
    }

    @InlineOnly
    public static final <T> T component3(List<? extends T> list) {
        return list.get(2);
    }

    @InlineOnly
    public static final <T> T component4(List<? extends T> list) {
        return list.get(3);
    }

    @InlineOnly
    public static final <T> T component5(List<? extends T> list) {
        return list.get(4);
    }

    public static final <T> boolean contains(Iterable<? extends T> iterable, T t) {
        if (iterable instanceof Collection) {
            return ((Collection) iterable).contains(t);
        }
        return indexOf(iterable, t) >= 0;
    }

    public static final <T> int count(Iterable<? extends T> iterable) {
        if (iterable instanceof Collection) {
            return ((Collection) iterable).size();
        }
        int i = 0;
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            it.next();
            i++;
            if (i < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i;
    }

    public static final <T> List<T> distinct(Iterable<? extends T> iterable) {
        return toList(toMutableSet(iterable));
    }

    public static final <T, K> List<T> distinctBy(Iterable<? extends T> iterable, Function1<? super T, ? extends K> function1) {
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (hashSet.add(function1.invoke(obj))) {
                arrayList.add(obj);
            }
        }
        return arrayList;
    }

    public static final <T> List<T> drop(Iterable<? extends T> iterable, int i) {
        ArrayList arrayList;
        int i2 = 0;
        if (!(i >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i + " is less than zero.").toString());
        } else if (i == 0) {
            return toList(iterable);
        } else {
            if (iterable instanceof Collection) {
                Collection collection = (Collection) iterable;
                int size = collection.size() - i;
                if (size <= 0) {
                    return CollectionsKt__CollectionsKt.emptyList();
                }
                if (size == 1) {
                    return CollectionsKt__CollectionsJVMKt.listOf(last(iterable));
                }
                arrayList = new ArrayList(size);
                if (iterable instanceof List) {
                    if (iterable instanceof RandomAccess) {
                        int size2 = collection.size();
                        while (i < size2) {
                            arrayList.add(((List) iterable).get(i));
                            i++;
                        }
                    } else {
                        ListIterator listIterator = ((List) iterable).listIterator(i);
                        while (listIterator.hasNext()) {
                            arrayList.add(listIterator.next());
                        }
                    }
                    return arrayList;
                }
            } else {
                arrayList = new ArrayList();
            }
            for (T t : iterable) {
                if (i2 >= i) {
                    arrayList.add(t);
                } else {
                    i2++;
                }
            }
            return CollectionsKt__CollectionsKt.optimizeReadOnlyList(arrayList);
        }
    }

    public static final <T> List<T> dropLast(List<? extends T> list, int i) {
        if (i >= 0) {
            return take(list, RangesKt___RangesKt.coerceAtLeast(list.size() - i, 0));
        }
        throw new IllegalArgumentException(("Requested element count " + i + " is less than zero.").toString());
    }

    /* JADX DEBUG: Type inference failed for r1v1. Raw type applied. Possible types: T, ? super T */
    public static final <T> List<T> dropLastWhile(List<? extends T> list, Function1<? super T, Boolean> function1) {
        if (!list.isEmpty()) {
            ListIterator<? extends T> listIterator = list.listIterator(list.size());
            while (listIterator.hasPrevious()) {
                if (!function1.invoke((T) listIterator.previous()).booleanValue()) {
                    return take(list, listIterator.nextIndex() + 1);
                }
            }
        }
        return CollectionsKt__CollectionsKt.emptyList();
    }

    public static final <T> List<T> dropWhile(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        boolean z = false;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (z) {
                arrayList.add(obj);
            } else if (!function1.invoke(obj).booleanValue()) {
                arrayList.add(obj);
                z = true;
            }
        }
        return arrayList;
    }

    public static final <T> T elementAt(Iterable<? extends T> iterable, int i) {
        if (iterable instanceof List) {
            return (T) ((List) iterable).get(i);
        }
        return (T) elementAtOrElse(iterable, i, new CollectionsKt___CollectionsKt$elementAt$1(i));
    }

    public static final <T> T elementAtOrElse(Iterable<? extends T> iterable, int i, Function1<? super Integer, ? extends T> function1) {
        if (iterable instanceof List) {
            List list = (List) iterable;
            return (i < 0 || i > CollectionsKt__CollectionsKt.getLastIndex(list)) ? function1.invoke(Integer.valueOf(i)) : (T) list.get(i);
        } else if (i < 0) {
            return function1.invoke(Integer.valueOf(i));
        } else {
            int i2 = 0;
            for (T t : iterable) {
                int i3 = i2 + 1;
                if (i == i2) {
                    return t;
                }
                i2 = i3;
            }
            return function1.invoke(Integer.valueOf(i));
        }
    }

    public static final <T> T elementAtOrNull(Iterable<? extends T> iterable, int i) {
        if (iterable instanceof List) {
            return (T) getOrNull((List) iterable, i);
        }
        if (i < 0) {
            return null;
        }
        int i2 = 0;
        for (T t : iterable) {
            int i3 = i2 + 1;
            if (i == i2) {
                return t;
            }
            i2 = i3;
        }
        return null;
    }

    public static final <T> List<T> filter(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (function1.invoke(obj).booleanValue()) {
                arrayList.add(obj);
            }
        }
        return arrayList;
    }

    public static final <T> List<T> filterIndexed(Iterable<? extends T> iterable, Function2<? super Integer, ? super T, Boolean> function2) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (function2.invoke(Integer.valueOf(i), obj).booleanValue()) {
                arrayList.add(obj);
            }
            i = i2;
        }
        return arrayList;
    }

    public static final <T, C extends Collection<? super T>> C filterIndexedTo(Iterable<? extends T> iterable, C c2, Function2<? super Integer, ? super T, Boolean> function2) {
        Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (function2.invoke(Integer.valueOf(i), obj).booleanValue()) {
                c2.add(obj);
            }
            i = i2;
        }
        return c2;
    }

    public static final /* synthetic */ <R> List<R> filterIsInstance(Iterable<?> iterable) {
        ArrayList arrayList = new ArrayList();
        for (Object obj : iterable) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (obj instanceof Object) {
                arrayList.add(obj);
            }
        }
        return arrayList;
    }

    public static final /* synthetic */ <R, C extends Collection<? super R>> C filterIsInstanceTo(Iterable<?> iterable, C c2) {
        for (Object obj : iterable) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (obj instanceof Object) {
                c2.add(obj);
            }
        }
        return c2;
    }

    public static final <T> List<T> filterNot(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (!function1.invoke(obj).booleanValue()) {
                arrayList.add(obj);
            }
        }
        return arrayList;
    }

    public static final <T> List<T> filterNotNull(Iterable<? extends T> iterable) {
        return (List) filterNotNullTo(iterable, new ArrayList());
    }

    public static final <C extends Collection<? super T>, T> C filterNotNullTo(Iterable<? extends T> iterable, C c2) {
        for (T t : iterable) {
            if (t != null) {
                c2.add(t);
            }
        }
        return c2;
    }

    public static final <T, C extends Collection<? super T>> C filterNotTo(Iterable<? extends T> iterable, C c2, Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (!function1.invoke(obj).booleanValue()) {
                c2.add(obj);
            }
        }
        return c2;
    }

    public static final <T, C extends Collection<? super T>> C filterTo(Iterable<? extends T> iterable, C c2, Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (function1.invoke(obj).booleanValue()) {
                c2.add(obj);
            }
        }
        return c2;
    }

    /* JADX WARN: Type inference failed for: r0v2, types: [T, java.lang.Object] */
    @InlineOnly
    public static final <T> T find(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        for (T t : iterable) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r1v1, resolved type: java.lang.Object */
    /* JADX WARN: Multi-variable type inference failed */
    @InlineOnly
    public static final <T> T findLast(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        T t = null;
        for (T t2 : iterable) {
            if (function1.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    public static final <T> T first(Iterable<? extends T> iterable) {
        if (iterable instanceof List) {
            return (T) first((List<? extends Object>) iterable);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        throw new NoSuchElementException("Collection is empty.");
    }

    public static final <T> T firstOrNull(Iterable<? extends T> iterable) {
        if (iterable instanceof List) {
            List list = (List) iterable;
            if (list.isEmpty()) {
                return null;
            }
            return (T) list.get(0);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        return null;
    }

    /* JADX DEBUG: Type inference failed for r1v1. Raw type applied. Possible types: T, ? super T */
    public static final <T, R> List<R> flatMap(Iterable<? extends T> iterable, Function1<? super T, ? extends Iterable<? extends R>> function1) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, function1.invoke((T) it.next()));
        }
        return arrayList;
    }

    /* JADX DEBUG: Type inference failed for r0v1. Raw type applied. Possible types: T, ? super T */
    public static final <T, R, C extends Collection<? super R>> C flatMapTo(Iterable<? extends T> iterable, C c2, Function1<? super T, ? extends Iterable<? extends R>> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke((T) it.next()));
        }
        return c2;
    }

    /* JADX DEBUG: Type inference failed for r0v1. Raw type applied. Possible types: T, ? super T */
    /* JADX DEBUG: Type inference failed for r2v4. Raw type applied. Possible types: R, ? super R */
    public static final <T, R> R fold(Iterable<? extends T> iterable, R r, Function2<? super R, ? super T, ? extends R> function2) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            r = function2.invoke(r, (T) it.next());
        }
        return r;
    }

    /* JADX DEBUG: Type inference failed for r2v1. Raw type applied. Possible types: T, ? super T */
    /* JADX DEBUG: Type inference failed for r7v4. Raw type applied. Possible types: R, ? super R */
    public static final <T, R> R foldIndexed(Iterable<? extends T> iterable, R r, Function3<? super Integer, ? super R, ? super T, ? extends R> function3) {
        Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            r = function3.invoke(Integer.valueOf(i), r, obj);
            i = i2;
        }
        return r;
    }

    /* JADX DEBUG: Type inference failed for r0v3. Raw type applied. Possible types: T, ? super T */
    /* JADX DEBUG: Type inference failed for r2v5. Raw type applied. Possible types: R, ? super R */
    public static final <T, R> R foldRight(List<? extends T> list, R r, Function2<? super T, ? super R, ? extends R> function2) {
        if (!list.isEmpty()) {
            ListIterator<? extends T> listIterator = list.listIterator(list.size());
            while (listIterator.hasPrevious()) {
                r = function2.invoke((T) listIterator.previous(), r);
            }
        }
        return r;
    }

    /* JADX DEBUG: Type inference failed for r1v0. Raw type applied. Possible types: T, ? super T */
    /* JADX DEBUG: Type inference failed for r3v5. Raw type applied. Possible types: R, ? super R */
    public static final <T, R> R foldRightIndexed(List<? extends T> list, R r, Function3<? super Integer, ? super T, ? super R, ? extends R> function3) {
        if (!list.isEmpty()) {
            ListIterator<? extends T> listIterator = list.listIterator(list.size());
            while (listIterator.hasPrevious()) {
                r = function3.invoke(Integer.valueOf(listIterator.previousIndex()), (T) listIterator.previous(), r);
            }
        }
        return r;
    }

    /* JADX DEBUG: Type inference failed for r0v1. Raw type applied. Possible types: T, ? super T */
    @HidesMembers
    public static final <T> void forEach(Iterable<? extends T> iterable, Function1<? super T, Unit> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            function1.invoke((T) it.next());
        }
    }

    /* JADX DEBUG: Type inference failed for r2v1. Raw type applied. Possible types: T, ? super T */
    public static final <T> void forEachIndexed(Iterable<? extends T> iterable, Function2<? super Integer, ? super T, Unit> function2) {
        Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            function2.invoke(Integer.valueOf(i), obj);
            i = i2;
        }
    }

    @InlineOnly
    public static final <T> T getOrElse(List<? extends T> list, int i, Function1<? super Integer, ? extends T> function1) {
        return (i < 0 || i > CollectionsKt__CollectionsKt.getLastIndex(list)) ? function1.invoke(Integer.valueOf(i)) : list.get(i);
    }

    public static final <T> T getOrNull(List<? extends T> list, int i) {
        if (i < 0 || i > CollectionsKt__CollectionsKt.getLastIndex(list)) {
            return null;
        }
        return list.get(i);
    }

    public static final <T, K> Map<K, List<T>> groupBy(Iterable<? extends T> iterable, Function1<? super T, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            K invoke = function1.invoke(obj);
            Object obj2 = linkedHashMap.get(invoke);
            if (obj2 == null) {
                obj2 = new ArrayList();
                linkedHashMap.put(invoke, obj2);
            }
            ((List) obj2).add(obj);
        }
        return linkedHashMap;
    }

    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(Iterable<? extends T> iterable, M m, Function1<? super T, ? extends K> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            K invoke = function1.invoke(obj);
            Object obj2 = m.get(invoke);
            if (obj2 == null) {
                obj2 = new ArrayList();
                m.put(invoke, obj2);
            }
            ((List) obj2).add(obj);
        }
        return m;
    }

    @SinceKotlin(version = "1.1")
    public static final <T, K> Grouping<T, K> groupingBy(final Iterable<? extends T> iterable, final Function1<? super T, ? extends K> function1) {
        return new Grouping<T, K>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$groupingBy$1
            /* JADX WARN: Type inference failed for: r2v1, types: [java.lang.Object, K] */
            @Override // kotlin.collections.Grouping
            public K keyOf(T t) {
                return function1.invoke(t);
            }

            @Override // kotlin.collections.Grouping
            public Iterator<T> sourceIterator() {
                return iterable.iterator();
            }
        };
    }

    public static final <T> int indexOf(Iterable<? extends T> iterable, T t) {
        if (iterable instanceof List) {
            return ((List) iterable).indexOf(t);
        }
        int i = 0;
        for (T t2 : iterable) {
            if (i < 0) {
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, t2)) {
                return i;
            }
            i++;
        }
        return -1;
    }

    /* JADX DEBUG: Type inference failed for r2v1. Raw type applied. Possible types: T, ? super T */
    public static final <T> int indexOfFirst(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (function1.invoke(obj).booleanValue()) {
                return i;
            }
            i++;
        }
        return -1;
    }

    /* JADX DEBUG: Type inference failed for r3v1. Raw type applied. Possible types: T, ? super T */
    public static final <T> int indexOfLast(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = iterable.iterator();
        int i = -1;
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (function1.invoke(obj).booleanValue()) {
                i = i2;
            }
            i2++;
        }
        return i;
    }

    public static final <T> Set<T> intersect(Iterable<? extends T> iterable, Iterable<? extends T> iterable2) {
        Set<T> mutableSet = toMutableSet(iterable);
        CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, iterable2);
        return mutableSet;
    }

    public static final <T, A extends Appendable> A joinTo(Iterable<? extends T> iterable, A a2, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Function1<? super T, ? extends CharSequence> function1) {
        a2.append(charSequence2);
        int i2 = 0;
        for (T t : iterable) {
            i2++;
            if (i2 > 1) {
                a2.append(charSequence);
            }
            if (i >= 0 && i2 > i) {
                break;
            }
            StringsKt__StringBuilderKt.appendElement(a2, t, function1);
        }
        if (i >= 0 && i2 > i) {
            a2.append(charSequence4);
        }
        a2.append(charSequence3);
        return a2;
    }

    public static final <T> String joinToString(Iterable<? extends T> iterable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Function1<? super T, ? extends CharSequence> function1) {
        String sb = ((StringBuilder) joinTo(iterable, new StringBuilder(), charSequence, charSequence2, charSequence3, i, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), …ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(Iterable iterable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Function1 function1, int i2, Object obj) {
        if ((i2 & 1) != 0) {
            charSequence = StringUtil.ARRAY_ELEMENT_SEPARATOR;
        }
        String str = (i2 & 2) != 0 ? "" : charSequence2;
        String str2 = (i2 & 4) == 0 ? charSequence3 : "";
        int i3 = (i2 & 8) != 0 ? -1 : i;
        if ((i2 & 16) != 0) {
            charSequence4 = StringHelper.STRING_MORE;
        }
        CharSequence charSequence5 = charSequence4;
        if ((i2 & 32) != 0) {
            function1 = null;
        }
        return joinToString(iterable, charSequence, str, str2, i3, charSequence5, function1);
    }

    public static final <T> T last(Iterable<? extends T> iterable) {
        if (iterable instanceof List) {
            return (T) last((List<? extends Object>) iterable);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                next = it.next();
            }
            return next;
        }
        throw new NoSuchElementException("Collection is empty.");
    }

    public static final <T> int lastIndexOf(Iterable<? extends T> iterable, T t) {
        if (iterable instanceof List) {
            return ((List) iterable).lastIndexOf(t);
        }
        int i = -1;
        int i2 = 0;
        for (T t2 : iterable) {
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, t2)) {
                i = i2;
            }
            i2++;
        }
        return i;
    }

    public static final <T> T lastOrNull(Iterable<? extends T> iterable) {
        if (iterable instanceof List) {
            List list = (List) iterable;
            if (list.isEmpty()) {
                return null;
            }
            return (T) list.get(list.size() - 1);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                next = it.next();
            }
            return next;
        }
        return null;
    }

    /* JADX DEBUG: Type inference failed for r1v3. Raw type applied. Possible types: T, ? super T */
    public static final <T, R> List<R> map(Iterable<? extends T> iterable, Function1<? super T, ? extends R> function1) {
        ArrayList arrayList = new ArrayList(CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10));
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(function1.invoke((T) it.next()));
        }
        return arrayList;
    }

    /* JADX DEBUG: Type inference failed for r3v1. Raw type applied. Possible types: T, ? super T */
    public static final <T, R> List<R> mapIndexed(Iterable<? extends T> iterable, Function2<? super Integer, ? super T, ? extends R> function2) {
        ArrayList arrayList = new ArrayList(CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10));
        Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            arrayList.add(function2.invoke(Integer.valueOf(i), obj));
            i = i2;
        }
        return arrayList;
    }

    /* JADX DEBUG: Type inference failed for r3v1. Raw type applied. Possible types: T, ? super T */
    public static final <T, R> List<R> mapIndexedNotNull(Iterable<? extends T> iterable, Function2<? super Integer, ? super T, ? extends R> function2) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            R invoke = function2.invoke(Integer.valueOf(i), obj);
            if (invoke != null) {
                arrayList.add(invoke);
            }
            i = i2;
        }
        return arrayList;
    }

    /* JADX DEBUG: Type inference failed for r2v1. Raw type applied. Possible types: T, ? super T */
    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(Iterable<? extends T> iterable, C c2, Function2<? super Integer, ? super T, ? extends R> function2) {
        Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            R invoke = function2.invoke(Integer.valueOf(i), obj);
            if (invoke != null) {
                c2.add(invoke);
            }
            i = i2;
        }
        return c2;
    }

    /* JADX DEBUG: Type inference failed for r2v1. Raw type applied. Possible types: T, ? super T */
    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(Iterable<? extends T> iterable, C c2, Function2<? super Integer, ? super T, ? extends R> function2) {
        Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i2 = i + 1;
            if (i < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            c2.add(function2.invoke(Integer.valueOf(i), obj));
            i = i2;
        }
        return c2;
    }

    /* JADX DEBUG: Type inference failed for r1v1. Raw type applied. Possible types: T, ? super T */
    public static final <T, R> List<R> mapNotNull(Iterable<? extends T> iterable, Function1<? super T, ? extends R> function1) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            R invoke = function1.invoke((T) it.next());
            if (invoke != null) {
                arrayList.add(invoke);
            }
        }
        return arrayList;
    }

    /* JADX DEBUG: Type inference failed for r0v1. Raw type applied. Possible types: T, ? super T */
    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(Iterable<? extends T> iterable, C c2, Function1<? super T, ? extends R> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            R invoke = function1.invoke((T) it.next());
            if (invoke != null) {
                c2.add(invoke);
            }
        }
        return c2;
    }

    /* JADX DEBUG: Type inference failed for r0v1. Raw type applied. Possible types: T, ? super T */
    public static final <T, R, C extends Collection<? super R>> C mapTo(Iterable<? extends T> iterable, C c2, Function1<? super T, ? extends R> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            c2.add(function1.invoke((T) it.next()));
        }
        return c2;
    }

    @SinceKotlin(version = "1.1")
    /* renamed from: max */
    public static final Double m947max(Iterable<Double> iterable) {
        Iterator<Double> it = iterable.iterator();
        if (it.hasNext()) {
            double doubleValue = it.next().doubleValue();
            if (Double.isNaN(doubleValue)) {
                return Double.valueOf(doubleValue);
            }
            while (it.hasNext()) {
                double doubleValue2 = it.next().doubleValue();
                if (Double.isNaN(doubleValue2)) {
                    return Double.valueOf(doubleValue2);
                }
                if (doubleValue < doubleValue2) {
                    doubleValue = doubleValue2;
                }
            }
            return Double.valueOf(doubleValue);
        }
        return null;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r2v0, resolved type: java.lang.Object */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v1, types: [T, java.lang.Object] */
    public static final <T, R extends Comparable<? super R>> T maxBy(Iterable<? extends T> iterable, Function1<? super T, ? extends R> function1) {
        T t;
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            if (it.hasNext()) {
                R invoke = function1.invoke(next);
                T t2 = next;
                do {
                    T next2 = it.next();
                    R invoke2 = function1.invoke(next2);
                    t = t2;
                    if (invoke.compareTo(invoke2) < 0) {
                        invoke = invoke2;
                        t = next2;
                    }
                    t2 = t;
                } while (it.hasNext());
                return t;
            }
            return next;
        }
        return null;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r1v1, resolved type: java.lang.Object */
    /* JADX DEBUG: Type inference failed for r0v7. Raw type applied. Possible types: T, ? super T */
    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> T maxWith(Iterable<? extends T> iterable, Comparator<? super T> comparator) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            Object obj = (T) it.next();
            while (it.hasNext()) {
                T next = it.next();
                if (comparator.compare(obj, next) < 0) {
                    obj = next;
                }
            }
            return (T) obj;
        }
        return null;
    }

    @SinceKotlin(version = "1.1")
    /* renamed from: min */
    public static final Double m949min(Iterable<Double> iterable) {
        Iterator<Double> it = iterable.iterator();
        if (it.hasNext()) {
            double doubleValue = it.next().doubleValue();
            if (Double.isNaN(doubleValue)) {
                return Double.valueOf(doubleValue);
            }
            while (it.hasNext()) {
                double doubleValue2 = it.next().doubleValue();
                if (Double.isNaN(doubleValue2)) {
                    return Double.valueOf(doubleValue2);
                }
                if (doubleValue > doubleValue2) {
                    doubleValue = doubleValue2;
                }
            }
            return Double.valueOf(doubleValue);
        }
        return null;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r2v0, resolved type: java.lang.Object */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v1, types: [T, java.lang.Object] */
    public static final <T, R extends Comparable<? super R>> T minBy(Iterable<? extends T> iterable, Function1<? super T, ? extends R> function1) {
        T t;
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            if (it.hasNext()) {
                R invoke = function1.invoke(next);
                T t2 = next;
                do {
                    T next2 = it.next();
                    R invoke2 = function1.invoke(next2);
                    t = t2;
                    if (invoke.compareTo(invoke2) > 0) {
                        invoke = invoke2;
                        t = next2;
                    }
                    t2 = t;
                } while (it.hasNext());
                return t;
            }
            return next;
        }
        return null;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r1v1, resolved type: java.lang.Object */
    /* JADX DEBUG: Type inference failed for r0v7. Raw type applied. Possible types: T, ? super T */
    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> T minWith(Iterable<? extends T> iterable, Comparator<? super T> comparator) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            Object obj = (T) it.next();
            while (it.hasNext()) {
                T next = it.next();
                if (comparator.compare(obj, next) > 0) {
                    obj = next;
                }
            }
            return (T) obj;
        }
        return null;
    }

    public static final <T> List<T> minus(Iterable<? extends T> iterable, T t) {
        ArrayList arrayList = new ArrayList(CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10));
        boolean z = false;
        for (T t2 : iterable) {
            boolean z2 = true;
            if (!z && Intrinsics.areEqual(t2, t)) {
                z = true;
                z2 = false;
            }
            if (z2) {
                arrayList.add(t2);
            }
        }
        return arrayList;
    }

    @InlineOnly
    public static final <T> List<T> minusElement(Iterable<? extends T> iterable, T t) {
        return minus(iterable, t);
    }

    public static final <T> boolean none(Iterable<? extends T> iterable) {
        return iterable instanceof Collection ? ((Collection) iterable).isEmpty() : !iterable.iterator().hasNext();
    }

    @SinceKotlin(version = "1.1")
    public static final <T, C extends Iterable<? extends T>> C onEach(C c2, Function1<? super T, Unit> function1) {
        Iterator<T> it = c2.iterator();
        while (it.hasNext()) {
            function1.invoke(it.next());
        }
        return c2;
    }

    public static final <T> Pair<List<T>, List<T>> partition(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (function1.invoke(obj).booleanValue()) {
                arrayList.add(obj);
            } else {
                arrayList2.add(obj);
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    public static final <T> List<T> plus(Iterable<? extends T> iterable, T t) {
        if (iterable instanceof Collection) {
            return plus((Collection) iterable, (Object) t);
        }
        ArrayList arrayList = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable);
        arrayList.add(t);
        return arrayList;
    }

    @InlineOnly
    public static final <T> List<T> plusElement(Iterable<? extends T> iterable, T t) {
        return plus(iterable, t);
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    public static final <T> T random(Collection<? extends T> collection) {
        return (T) random(collection, Random.Default);
    }

    /* JADX DEBUG: Type inference failed for r1v1. Raw type applied. Possible types: T extends S, ? super T extends S */
    public static final <S, T extends S> S reduce(Iterable<? extends T> iterable, Function2<? super S, ? super T, ? extends S> function2) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            S next = it.next();
            while (it.hasNext()) {
                next = function2.invoke(next, (T) it.next());
            }
            return (S) next;
        }
        throw new UnsupportedOperationException("Empty collection can't be reduced.");
    }

    /* JADX DEBUG: Type inference failed for r4v0. Raw type applied. Possible types: T extends S, ? super T extends S */
    public static final <S, T extends S> S reduceIndexed(Iterable<? extends T> iterable, Function3<? super Integer, ? super S, ? super T, ? extends S> function3) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            S next = it.next();
            int i = 1;
            while (it.hasNext()) {
                int i2 = i + 1;
                if (i < 0) {
                    if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                        throw new ArithmeticException("Index overflow has happened.");
                    }
                    CollectionsKt__CollectionsKt.throwIndexOverflow();
                }
                next = function3.invoke(Integer.valueOf(i), next, (T) it.next());
                i = i2;
            }
            return (S) next;
        }
        throw new UnsupportedOperationException("Empty collection can't be reduced.");
    }

    /* JADX DEBUG: Type inference failed for r1v1. Raw type applied. Possible types: T extends S, ? super T extends S */
    public static final <S, T extends S> S reduceRight(List<? extends T> list, Function2<? super T, ? super S, ? extends S> function2) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        if (listIterator.hasPrevious()) {
            S previous = listIterator.previous();
            while (listIterator.hasPrevious()) {
                previous = function2.invoke((T) listIterator.previous(), previous);
            }
            return (S) previous;
        }
        throw new UnsupportedOperationException("Empty list can't be reduced.");
    }

    /* JADX DEBUG: Type inference failed for r2v0. Raw type applied. Possible types: T extends S, ? super T extends S */
    public static final <S, T extends S> S reduceRightIndexed(List<? extends T> list, Function3<? super Integer, ? super T, ? super S, ? extends S> function3) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        if (listIterator.hasPrevious()) {
            S previous = listIterator.previous();
            while (listIterator.hasPrevious()) {
                previous = function3.invoke(Integer.valueOf(listIterator.previousIndex()), (T) listIterator.previous(), previous);
            }
            return (S) previous;
        }
        throw new UnsupportedOperationException("Empty list can't be reduced.");
    }

    /* JADX DEBUG: Multi-variable search result rejected for r3v0, resolved type: java.lang.Iterable<? extends T> */
    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> Iterable<T> requireNoNulls(Iterable<? extends T> iterable) {
        Iterator it = iterable.iterator();
        while (it.hasNext()) {
            if (it.next() == null) {
                throw new IllegalArgumentException("null element found in " + iterable + IStringUtil.EXTENSION_SEPARATOR);
            }
        }
        return iterable;
    }

    public static final <T> List<T> reversed(Iterable<? extends T> iterable) {
        if (!(iterable instanceof Collection) || ((Collection) iterable).size() > 1) {
            List<T> mutableList = toMutableList(iterable);
            CollectionsKt___CollectionsJvmKt.reverse(mutableList);
            return mutableList;
        }
        return toList(iterable);
    }

    public static final <T> T single(Iterable<? extends T> iterable) {
        if (iterable instanceof List) {
            return (T) single((List<? extends Object>) iterable);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            if (it.hasNext()) {
                throw new IllegalArgumentException("Collection has more than one element.");
            }
            return next;
        }
        throw new NoSuchElementException("Collection is empty.");
    }

    public static final <T> T singleOrNull(Iterable<? extends T> iterable) {
        if (iterable instanceof List) {
            List list = (List) iterable;
            if (list.size() == 1) {
                return (T) list.get(0);
            }
            return null;
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            if (it.hasNext()) {
                return null;
            }
            return next;
        }
        return null;
    }

    public static final <T> List<T> slice(List<? extends T> list, IntRange intRange) {
        return intRange.isEmpty() ? CollectionsKt__CollectionsKt.emptyList() : toList(list.subList(intRange.getStart().intValue(), intRange.getEndInclusive().intValue() + 1));
    }

    public static final <T, R extends Comparable<? super R>> void sortBy(List<T> list, Function1<? super T, ? extends R> function1) {
        if (list.size() > 1) {
            CollectionsKt__MutableCollectionsJVMKt.sortWith(list, new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
        }
    }

    public static final <T, R extends Comparable<? super R>> void sortByDescending(List<T> list, Function1<? super T, ? extends R> function1) {
        if (list.size() > 1) {
            CollectionsKt__MutableCollectionsJVMKt.sortWith(list, new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
        }
    }

    public static final <T extends Comparable<? super T>> void sortDescending(List<T> list) {
        CollectionsKt__MutableCollectionsJVMKt.sortWith(list, ComparisonsKt__ComparisonsKt.reverseOrder());
    }

    public static final <T extends Comparable<? super T>> List<T> sorted(Iterable<? extends T> iterable) {
        if (iterable instanceof Collection) {
            Collection collection = (Collection) iterable;
            if (collection.size() <= 1) {
                return toList(iterable);
            }
            Object[] array = collection.toArray(new Comparable[0]);
            if (array != null) {
                if (array != null) {
                    Comparable[] comparableArr = (Comparable[]) array;
                    if (comparableArr != null) {
                        ArraysKt___ArraysJvmKt.sort((Object[]) comparableArr);
                        return ArraysKt___ArraysJvmKt.asList(comparableArr);
                    }
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
                }
                throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        List<T> mutableList = toMutableList(iterable);
        CollectionsKt__MutableCollectionsJVMKt.sort(mutableList);
        return mutableList;
    }

    public static final <T, R extends Comparable<? super R>> List<T> sortedBy(Iterable<? extends T> iterable, Function1<? super T, ? extends R> function1) {
        return sortedWith(iterable, new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
    }

    public static final <T, R extends Comparable<? super R>> List<T> sortedByDescending(Iterable<? extends T> iterable, Function1<? super T, ? extends R> function1) {
        return sortedWith(iterable, new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
    }

    public static final <T extends Comparable<? super T>> List<T> sortedDescending(Iterable<? extends T> iterable) {
        return sortedWith(iterable, ComparisonsKt__ComparisonsKt.reverseOrder());
    }

    /* JADX DEBUG: Multi-variable search result rejected for r0v2, resolved type: java.util.Collection */
    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> List<T> sortedWith(Iterable<? extends T> iterable, Comparator<? super T> comparator) {
        if (iterable instanceof Collection) {
            Collection collection = (Collection) iterable;
            if (collection.size() <= 1) {
                return toList(iterable);
            }
            Object[] array = collection.toArray(new Object[0]);
            if (array != null) {
                if (array != null) {
                    ArraysKt___ArraysJvmKt.sortWith(array, comparator);
                    return ArraysKt___ArraysJvmKt.asList(array);
                }
                throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        List<T> mutableList = toMutableList(iterable);
        CollectionsKt__MutableCollectionsJVMKt.sortWith(mutableList, comparator);
        return mutableList;
    }

    public static final <T> Set<T> subtract(Iterable<? extends T> iterable, Iterable<? extends T> iterable2) {
        Set<T> mutableSet = toMutableSet(iterable);
        CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, iterable2);
        return mutableSet;
    }

    /* JADX DEBUG: Type inference failed for r1v1. Raw type applied. Possible types: T, ? super T */
    public static final <T> int sumBy(Iterable<? extends T> iterable, Function1<? super T, Integer> function1) {
        Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            i += function1.invoke((T) it.next()).intValue();
        }
        return i;
    }

    /* JADX DEBUG: Type inference failed for r2v1. Raw type applied. Possible types: T, ? super T */
    public static final <T> double sumByDouble(Iterable<? extends T> iterable, Function1<? super T, Double> function1) {
        Iterator<? extends T> it = iterable.iterator();
        double d2 = 0.0d;
        while (it.hasNext()) {
            d2 += function1.invoke((T) it.next()).doubleValue();
        }
        return d2;
    }

    @JvmName(name = "sumOfByte")
    public static final int sumOfByte(Iterable<Byte> iterable) {
        int i = 0;
        for (Byte b2 : iterable) {
            i += b2.byteValue();
        }
        return i;
    }

    @JvmName(name = "sumOfDouble")
    public static final double sumOfDouble(Iterable<Double> iterable) {
        double d2 = 0.0d;
        for (Double d3 : iterable) {
            d2 += d3.doubleValue();
        }
        return d2;
    }

    @JvmName(name = "sumOfFloat")
    public static final float sumOfFloat(Iterable<Float> iterable) {
        float f2 = 0.0f;
        for (Float f3 : iterable) {
            f2 += f3.floatValue();
        }
        return f2;
    }

    @JvmName(name = "sumOfInt")
    public static final int sumOfInt(Iterable<Integer> iterable) {
        int i = 0;
        for (Integer num : iterable) {
            i += num.intValue();
        }
        return i;
    }

    @JvmName(name = "sumOfLong")
    public static final long sumOfLong(Iterable<Long> iterable) {
        long j = 0;
        for (Long l : iterable) {
            j += l.longValue();
        }
        return j;
    }

    @JvmName(name = "sumOfShort")
    public static final int sumOfShort(Iterable<Short> iterable) {
        int i = 0;
        for (Short sh : iterable) {
            i += sh.shortValue();
        }
        return i;
    }

    public static final <T> List<T> take(Iterable<? extends T> iterable, int i) {
        int i2 = 0;
        if (!(i >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i + " is less than zero.").toString());
        } else if (i == 0) {
            return CollectionsKt__CollectionsKt.emptyList();
        } else {
            if (iterable instanceof Collection) {
                if (i >= ((Collection) iterable).size()) {
                    return toList(iterable);
                }
                if (i == 1) {
                    return CollectionsKt__CollectionsJVMKt.listOf(first(iterable));
                }
            }
            ArrayList arrayList = new ArrayList(i);
            for (T t : iterable) {
                arrayList.add(t);
                i2++;
                if (i2 == i) {
                    break;
                }
            }
            return CollectionsKt__CollectionsKt.optimizeReadOnlyList(arrayList);
        }
    }

    public static final <T> List<T> takeLast(List<? extends T> list, int i) {
        if (!(i >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i + " is less than zero.").toString());
        } else if (i == 0) {
            return CollectionsKt__CollectionsKt.emptyList();
        } else {
            int size = list.size();
            if (i >= size) {
                return toList(list);
            }
            if (i == 1) {
                return CollectionsKt__CollectionsJVMKt.listOf(last((List<? extends Object>) list));
            }
            ArrayList arrayList = new ArrayList(i);
            if (list instanceof RandomAccess) {
                for (int i2 = size - i; i2 < size; i2++) {
                    arrayList.add(list.get(i2));
                }
            } else {
                ListIterator<? extends T> listIterator = list.listIterator(size - i);
                while (listIterator.hasNext()) {
                    arrayList.add(listIterator.next());
                }
            }
            return arrayList;
        }
    }

    /* JADX DEBUG: Type inference failed for r1v1. Raw type applied. Possible types: T, ? super T */
    public static final <T> List<T> takeLastWhile(List<? extends T> list, Function1<? super T, Boolean> function1) {
        if (list.isEmpty()) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            if (!function1.invoke((T) listIterator.previous()).booleanValue()) {
                listIterator.next();
                int size = list.size() - listIterator.nextIndex();
                if (size == 0) {
                    return CollectionsKt__CollectionsKt.emptyList();
                }
                ArrayList arrayList = new ArrayList(size);
                while (listIterator.hasNext()) {
                    arrayList.add(listIterator.next());
                }
                return arrayList;
            }
        }
        return toList(list);
    }

    public static final <T> List<T> takeWhile(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (!function1.invoke(obj).booleanValue()) {
                break;
            }
            arrayList.add(obj);
        }
        return arrayList;
    }

    public static final boolean[] toBooleanArray(Collection<Boolean> collection) {
        boolean[] zArr = new boolean[collection.size()];
        int i = 0;
        for (Boolean bool : collection) {
            zArr[i] = bool.booleanValue();
            i++;
        }
        return zArr;
    }

    public static final byte[] toByteArray(Collection<Byte> collection) {
        byte[] bArr = new byte[collection.size()];
        int i = 0;
        for (Byte b2 : collection) {
            bArr[i] = b2.byteValue();
            i++;
        }
        return bArr;
    }

    public static final char[] toCharArray(Collection<Character> collection) {
        char[] cArr = new char[collection.size()];
        int i = 0;
        for (Character ch : collection) {
            cArr[i] = ch.charValue();
            i++;
        }
        return cArr;
    }

    public static final <T, C extends Collection<? super T>> C toCollection(Iterable<? extends T> iterable, C c2) {
        for (T t : iterable) {
            c2.add(t);
        }
        return c2;
    }

    public static final double[] toDoubleArray(Collection<Double> collection) {
        double[] dArr = new double[collection.size()];
        int i = 0;
        for (Double d2 : collection) {
            dArr[i] = d2.doubleValue();
            i++;
        }
        return dArr;
    }

    public static final float[] toFloatArray(Collection<Float> collection) {
        float[] fArr = new float[collection.size()];
        int i = 0;
        for (Float f2 : collection) {
            fArr[i] = f2.floatValue();
            i++;
        }
        return fArr;
    }

    public static final <T> HashSet<T> toHashSet(Iterable<? extends T> iterable) {
        return (HashSet) toCollection(iterable, new HashSet(MapsKt__MapsKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 12))));
    }

    public static final int[] toIntArray(Collection<Integer> collection) {
        int[] iArr = new int[collection.size()];
        int i = 0;
        for (Integer num : collection) {
            iArr[i] = num.intValue();
            i++;
        }
        return iArr;
    }

    public static final <T> List<T> toList(Iterable<? extends T> iterable) {
        if (iterable instanceof Collection) {
            Collection collection = (Collection) iterable;
            int size = collection.size();
            if (size != 0) {
                if (size != 1) {
                    return toMutableList(collection);
                }
                return CollectionsKt__CollectionsJVMKt.listOf(iterable instanceof List ? ((List) iterable).get(0) : iterable.iterator().next());
            }
            return CollectionsKt__CollectionsKt.emptyList();
        }
        return CollectionsKt__CollectionsKt.optimizeReadOnlyList(toMutableList(iterable));
    }

    public static final long[] toLongArray(Collection<Long> collection) {
        long[] jArr = new long[collection.size()];
        int i = 0;
        for (Long l : collection) {
            jArr[i] = l.longValue();
            i++;
        }
        return jArr;
    }

    public static final <T> List<T> toMutableList(Iterable<? extends T> iterable) {
        if (iterable instanceof Collection) {
            return toMutableList((Collection) iterable);
        }
        return (List) toCollection(iterable, new ArrayList());
    }

    public static final <T> Set<T> toMutableSet(Iterable<? extends T> iterable) {
        return iterable instanceof Collection ? new LinkedHashSet((Collection) iterable) : (Set) toCollection(iterable, new LinkedHashSet());
    }

    public static final <T> Set<T> toSet(Iterable<? extends T> iterable) {
        if (iterable instanceof Collection) {
            Collection collection = (Collection) iterable;
            int size = collection.size();
            if (size != 0) {
                if (size != 1) {
                    return (Set) toCollection(iterable, new LinkedHashSet(MapsKt__MapsKt.mapCapacity(collection.size())));
                }
                return SetsKt__SetsJVMKt.setOf(iterable instanceof List ? ((List) iterable).get(0) : iterable.iterator().next());
            }
            return SetsKt__SetsKt.emptySet();
        }
        return SetsKt__SetsKt.optimizeReadOnlySet((Set) toCollection(iterable, new LinkedHashSet()));
    }

    public static final short[] toShortArray(Collection<Short> collection) {
        short[] sArr = new short[collection.size()];
        int i = 0;
        for (Short sh : collection) {
            sArr[i] = sh.shortValue();
            i++;
        }
        return sArr;
    }

    public static final <T> Set<T> union(Iterable<? extends T> iterable, Iterable<? extends T> iterable2) {
        Set<T> mutableSet = toMutableSet(iterable);
        CollectionsKt__MutableCollectionsKt.addAll(mutableSet, iterable2);
        return mutableSet;
    }

    @SinceKotlin(version = LibsInfoDef.CYBER_VIDEO_SR_MODEL_VERSION)
    public static final <T> List<List<T>> windowed(Iterable<? extends T> iterable, int i, int i2, boolean z) {
        SlidingWindowKt.checkWindowSizeStep(i, i2);
        if ((iterable instanceof RandomAccess) && (iterable instanceof List)) {
            List list = (List) iterable;
            int size = list.size();
            ArrayList arrayList = new ArrayList((size / i2) + (size % i2 == 0 ? 0 : 1));
            int i3 = 0;
            while (i3 >= 0 && size > i3) {
                int coerceAtMost = RangesKt___RangesKt.coerceAtMost(i, size - i3);
                if (coerceAtMost < i && !z) {
                    break;
                }
                ArrayList arrayList2 = new ArrayList(coerceAtMost);
                for (int i4 = 0; i4 < coerceAtMost; i4++) {
                    arrayList2.add(list.get(i4 + i3));
                }
                arrayList.add(arrayList2);
                i3 += i2;
            }
            return arrayList;
        }
        ArrayList arrayList3 = new ArrayList();
        Iterator windowedIterator = SlidingWindowKt.windowedIterator(iterable.iterator(), i, i2, z, false);
        while (windowedIterator.hasNext()) {
            arrayList3.add((List) windowedIterator.next());
        }
        return arrayList3;
    }

    public static /* synthetic */ List windowed$default(Iterable iterable, int i, int i2, boolean z, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return windowed(iterable, i, i2, z);
    }

    public static final <T> Iterable<IndexedValue<T>> withIndex(Iterable<? extends T> iterable) {
        return new IndexingIterable(new CollectionsKt___CollectionsKt$withIndex$1(iterable));
    }

    /* JADX DEBUG: Multi-variable search result rejected for r1v5, resolved type: GetSticker.GetStickerReqIdl$a */
    /* JADX DEBUG: Type inference failed for r3v1. Raw type applied. Possible types: T, ? super T */
    /* JADX WARN: Multi-variable type inference failed */
    public static final <T, R, V> List<V> zip(Iterable<? extends T> iterable, R[] rArr, Function2<? super T, ? super R, ? extends V> function2) {
        int length = rArr.length;
        ArrayList arrayList = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10), length));
        Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (i >= length) {
                break;
            }
            arrayList.add(function2.invoke(obj, rArr[i]));
            i++;
        }
        return arrayList;
    }

    @SinceKotlin(version = LibsInfoDef.CYBER_VIDEO_SR_MODEL_VERSION)
    public static final <T, R> List<R> zipWithNext(Iterable<? extends T> iterable, Function2<? super T, ? super T, ? extends R> function2) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            ArrayList arrayList = new ArrayList();
            T next = it.next();
            while (it.hasNext()) {
                T next2 = it.next();
                arrayList.add(function2.invoke(next, next2));
                next = (Object) next2;
            }
            return arrayList;
        }
        return CollectionsKt__CollectionsKt.emptyList();
    }

    @SinceKotlin(version = LibsInfoDef.CYBER_VIDEO_SR_MODEL_VERSION)
    public static final <T, R> List<R> chunked(Iterable<? extends T> iterable, int i, Function1<? super List<? extends T>, ? extends R> function1) {
        return windowed(iterable, i, i, true, function1);
    }

    @InlineOnly
    public static final <T> List<T> plusElement(Collection<? extends T> collection, T t) {
        return plus((Collection) collection, (Object) t);
    }

    @SinceKotlin(version = "1.3")
    public static final <T> T random(Collection<? extends T> collection, Random random) {
        if (!collection.isEmpty()) {
            return (T) elementAt(collection, random.nextInt(collection.size()));
        }
        throw new NoSuchElementException("Collection is empty.");
    }

    public static /* synthetic */ List windowed$default(Iterable iterable, int i, int i2, boolean z, Function1 function1, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return windowed(iterable, i, i2, z, function1);
    }

    /* JADX DEBUG: Type inference failed for r0v2. Raw type applied. Possible types: T, ? super T */
    public static final <T> boolean any(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        if ((iterable instanceof Collection) && ((Collection) iterable).isEmpty()) {
            return false;
        }
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (function1.invoke((T) it.next()).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    /* JADX DEBUG: Type inference failed for r0v1. Raw type applied. Possible types: T, ? super T */
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(Iterable<? extends T> iterable, M m, Function1<? super T, ? extends K> function1, Function1<? super T, ? extends V> function12) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            m.put(function1.invoke(obj), function12.invoke(obj));
        }
        return m;
    }

    @InlineOnly
    public static final <T> int count(Collection<? extends T> collection) {
        return collection.size();
    }

    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    @InlineOnly
    public static final <T> T findLast(List<? extends T> list, Function1<? super T, Boolean> function1) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            T previous = listIterator.previous();
            if (function1.invoke(previous).booleanValue()) {
                return previous;
            }
        }
        return null;
    }

    /* JADX DEBUG: Type inference failed for r0v2. Raw type applied. Possible types: T, ? super T */
    public static final <T> boolean none(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        if ((iterable instanceof Collection) && ((Collection) iterable).isEmpty()) {
            return true;
        }
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (function1.invoke((T) it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r3v0, resolved type: java.util.List<? extends T> */
    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> List<T> requireNoNulls(List<? extends T> list) {
        Iterator it = list.iterator();
        while (it.hasNext()) {
            if (it.next() == null) {
                throw new IllegalArgumentException("null element found in " + list + IStringUtil.EXTENSION_SEPARATOR);
            }
        }
        return list;
    }

    public static final <T> List<T> slice(List<? extends T> list, Iterable<Integer> iterable) {
        int collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        if (collectionSizeOrDefault == 0) {
            return CollectionsKt__CollectionsKt.emptyList();
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        for (Integer num : iterable) {
            arrayList.add(list.get(num.intValue()));
        }
        return arrayList;
    }

    /* JADX DEBUG: Type inference failed for r2v1. Raw type applied. Possible types: T, ? super T */
    public static final <T> int count(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        if ((iterable instanceof Collection) && ((Collection) iterable).isEmpty()) {
            return 0;
        }
        Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            if (function1.invoke((T) it.next()).booleanValue() && (i = i + 1) < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Count overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i;
    }

    @InlineOnly
    public static final <T> T elementAt(List<? extends T> list, int i) {
        return list.get(i);
    }

    /* JADX DEBUG: Type inference failed for r1v1. Raw type applied. Possible types: T, ? super T */
    public static final <T> int indexOfFirst(List<? extends T> list, Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = list.iterator();
        int i = 0;
        while (it.hasNext()) {
            if (function1.invoke((T) it.next()).booleanValue()) {
                return i;
            }
            i++;
        }
        return -1;
    }

    /* JADX DEBUG: Type inference failed for r0v2. Raw type applied. Possible types: T, ? super T */
    public static final <T> int indexOfLast(List<? extends T> list, Function1<? super T, Boolean> function1) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            if (function1.invoke((T) listIterator.previous()).booleanValue()) {
                return listIterator.nextIndex();
            }
        }
        return -1;
    }

    public static final <T> List<T> minus(Iterable<? extends T> iterable, T[] tArr) {
        if (tArr.length == 0) {
            return toList(iterable);
        }
        HashSet hashSet = ArraysKt___ArraysKt.toHashSet(tArr);
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (!hashSet.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    public static final <T> List<T> toMutableList(Collection<? extends T> collection) {
        return new ArrayList(collection);
    }

    /* JADX DEBUG: Type inference failed for r0v5. Raw type applied. Possible types: T, ? super T */
    public static final <T, K, V> Map<K, V> associateBy(Iterable<? extends T> iterable, Function1<? super T, ? extends K> function1, Function1<? super T, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap(RangesKt___RangesKt.coerceAtLeast(MapsKt__MapsKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10)), 16));
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            linkedHashMap.put(function1.invoke(obj), function12.invoke(obj));
        }
        return linkedHashMap;
    }

    public static final <T> int indexOf(List<? extends T> list, T t) {
        return list.indexOf(t);
    }

    public static final <T> int lastIndexOf(List<? extends T> list, T t) {
        return list.lastIndexOf(t);
    }

    public static final <T> List<T> plus(Collection<? extends T> collection, T t) {
        ArrayList arrayList = new ArrayList(collection.size() + 1);
        arrayList.addAll(collection);
        arrayList.add(t);
        return arrayList;
    }

    /* JADX DEBUG: Type inference failed for r2v1. Raw type applied. Possible types: R, ? super R */
    /* JADX DEBUG: Type inference failed for r3v5. Raw type applied. Possible types: T, ? super T */
    public static final <T, R, V> List<V> zip(Iterable<? extends T> iterable, Iterable<? extends R> iterable2, Function2<? super T, ? super R, ? extends V> function2) {
        Iterator<? extends T> it = iterable.iterator();
        Iterator<? extends R> it2 = iterable2.iterator();
        ArrayList arrayList = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10), CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable2, 10)));
        while (it.hasNext() && it2.hasNext()) {
            arrayList.add(function2.invoke((T) it.next(), (R) it2.next()));
        }
        return arrayList;
    }

    @InlineOnly
    public static final <T> T elementAtOrNull(List<? extends T> list, int i) {
        return (T) getOrNull(list, i);
    }

    public static final <T> T first(List<? extends T> list) {
        if (!list.isEmpty()) {
            return list.get(0);
        }
        throw new NoSuchElementException("List is empty.");
    }

    public static final <T> T singleOrNull(List<? extends T> list) {
        if (list.size() == 1) {
            return list.get(0);
        }
        return null;
    }

    public static final <T> T firstOrNull(List<? extends T> list) {
        if (list.isEmpty()) {
            return null;
        }
        return list.get(0);
    }

    public static final <T> T lastOrNull(List<? extends T> list) {
        if (list.isEmpty()) {
            return null;
        }
        return list.get(list.size() - 1);
    }

    /* JADX DEBUG: Multi-variable search result rejected for r3v1, resolved type: java.lang.Object */
    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> T singleOrNull(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        boolean z = false;
        T t = null;
        for (T t2 : iterable) {
            if (function1.invoke(t2).booleanValue()) {
                if (z) {
                    return null;
                }
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        return null;
    }

    @InlineOnly
    public static final <T> T elementAtOrElse(List<? extends T> list, int i, Function1<? super Integer, ? extends T> function1) {
        return (i < 0 || i > CollectionsKt__CollectionsKt.getLastIndex(list)) ? function1.invoke(Integer.valueOf(i)) : list.get(i);
    }

    /* JADX WARN: Type inference failed for: r0v1, types: [T, java.lang.Object] */
    public static final <T> T firstOrNull(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        for (T t : iterable) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r4v0, resolved type: M extends java.util.Map<? super K, java.util.List<V>> */
    /* JADX DEBUG: Type inference failed for r0v1. Raw type applied. Possible types: T, ? super T */
    /* JADX WARN: Multi-variable type inference failed */
    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(Iterable<? extends T> iterable, M m, Function1<? super T, ? extends K> function1, Function1<? super T, ? extends V> function12) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            K invoke = function1.invoke(obj);
            Object obj2 = m.get(invoke);
            if (obj2 == null) {
                obj2 = new ArrayList();
                m.put(invoke, obj2);
            }
            ((List) obj2).add(function12.invoke(obj));
        }
        return m;
    }

    public static final <T> T last(List<? extends T> list) {
        if (!list.isEmpty()) {
            return list.get(CollectionsKt__CollectionsKt.getLastIndex(list));
        }
        throw new NoSuchElementException("List is empty.");
    }

    /* JADX DEBUG: Multi-variable search result rejected for r1v1, resolved type: java.lang.Object */
    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> T lastOrNull(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        T t = null;
        for (T t2 : iterable) {
            if (function1.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    public static final <T> List<T> plus(Iterable<? extends T> iterable, T[] tArr) {
        if (iterable instanceof Collection) {
            return plus((Collection) iterable, (Object[]) tArr);
        }
        ArrayList arrayList = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, tArr);
        return arrayList;
    }

    public static final <T> T single(List<? extends T> list) {
        int size = list.size();
        if (size != 0) {
            if (size == 1) {
                return list.get(0);
            }
            throw new IllegalArgumentException("List has more than one element.");
        }
        throw new NoSuchElementException("List is empty.");
    }

    @SinceKotlin(version = LibsInfoDef.CYBER_VIDEO_SR_MODEL_VERSION)
    public static final <T> List<Pair<T, T>> zipWithNext(Iterable<? extends T> iterable) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            ArrayList arrayList = new ArrayList();
            T next = it.next();
            while (it.hasNext()) {
                T next2 = it.next();
                arrayList.add(TuplesKt.to(next, next2));
                next = next2;
            }
            return arrayList;
        }
        return CollectionsKt__CollectionsKt.emptyList();
    }

    /* JADX WARN: Type inference failed for: r0v1, types: [T, java.lang.Object] */
    public static final <T> T first(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        for (T t : iterable) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    /* JADX DEBUG: Type inference failed for r1v1. Raw type applied. Possible types: T, ? super T */
    public static final <T, K, V> Map<K, List<V>> groupBy(Iterable<? extends T> iterable, Function1<? super T, ? extends K> function1, Function1<? super T, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            K invoke = function1.invoke(obj);
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(obj));
        }
        return linkedHashMap;
    }

    @SinceKotlin(version = "1.1")
    /* renamed from: max */
    public static final Float m948max(Iterable<Float> iterable) {
        Iterator<Float> it = iterable.iterator();
        if (it.hasNext()) {
            float floatValue = it.next().floatValue();
            if (Float.isNaN(floatValue)) {
                return Float.valueOf(floatValue);
            }
            while (it.hasNext()) {
                float floatValue2 = it.next().floatValue();
                if (Float.isNaN(floatValue2)) {
                    return Float.valueOf(floatValue2);
                }
                if (floatValue < floatValue2) {
                    floatValue = floatValue2;
                }
            }
            return Float.valueOf(floatValue);
        }
        return null;
    }

    @SinceKotlin(version = "1.1")
    /* renamed from: min */
    public static final Float m950min(Iterable<Float> iterable) {
        Iterator<Float> it = iterable.iterator();
        if (it.hasNext()) {
            float floatValue = it.next().floatValue();
            if (Float.isNaN(floatValue)) {
                return Float.valueOf(floatValue);
            }
            while (it.hasNext()) {
                float floatValue2 = it.next().floatValue();
                if (Float.isNaN(floatValue2)) {
                    return Float.valueOf(floatValue2);
                }
                if (floatValue > floatValue2) {
                    floatValue = floatValue2;
                }
            }
            return Float.valueOf(floatValue);
        }
        return null;
    }

    public static final <T> List<T> minus(Iterable<? extends T> iterable, Iterable<? extends T> iterable2) {
        Collection convertToSetForSetOperationWith = CollectionsKt__IterablesKt.convertToSetForSetOperationWith(iterable2, iterable);
        if (convertToSetForSetOperationWith.isEmpty()) {
            return toList(iterable);
        }
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (!convertToSetForSetOperationWith.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    /* JADX WARN: Type inference failed for: r0v2, types: [T, java.lang.Object] */
    public static final <T> T lastOrNull(List<? extends T> list, Function1<? super T, Boolean> function1) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            T previous = listIterator.previous();
            if (function1.invoke(previous).booleanValue()) {
                return previous;
            }
        }
        return null;
    }

    public static final <T, R> List<Pair<T, R>> zip(Iterable<? extends T> iterable, R[] rArr) {
        int length = rArr.length;
        ArrayList arrayList = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10), length));
        int i = 0;
        for (T t : iterable) {
            if (i >= length) {
                break;
            }
            arrayList.add(TuplesKt.to(t, rArr[i]));
            i++;
        }
        return arrayList;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r2v1, resolved type: java.lang.Object */
    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> T last(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        T t = null;
        boolean z = false;
        for (T t2 : iterable) {
            if (function1.invoke(t2).booleanValue()) {
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    public static final <T> List<T> plus(Collection<? extends T> collection, T[] tArr) {
        ArrayList arrayList = new ArrayList(collection.size() + tArr.length);
        arrayList.addAll(collection);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, tArr);
        return arrayList;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r2v1, resolved type: java.lang.Object */
    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> T single(Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        T t = null;
        boolean z = false;
        for (T t2 : iterable) {
            if (function1.invoke(t2).booleanValue()) {
                if (z) {
                    throw new IllegalArgumentException("Collection contains more than one matching element.");
                }
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    @SinceKotlin(version = LibsInfoDef.CYBER_VIDEO_SR_MODEL_VERSION)
    public static final <T, R> List<R> windowed(Iterable<? extends T> iterable, int i, int i2, boolean z, Function1<? super List<? extends T>, ? extends R> function1) {
        SlidingWindowKt.checkWindowSizeStep(i, i2);
        if ((iterable instanceof RandomAccess) && (iterable instanceof List)) {
            List list = (List) iterable;
            int size = list.size();
            int i3 = 0;
            ArrayList arrayList = new ArrayList((size / i2) + (size % i2 == 0 ? 0 : 1));
            MovingSubList movingSubList = new MovingSubList(list);
            while (i3 >= 0 && size > i3) {
                int coerceAtMost = RangesKt___RangesKt.coerceAtMost(i, size - i3);
                if (!z && coerceAtMost < i) {
                    break;
                }
                movingSubList.move(i3, coerceAtMost + i3);
                arrayList.add(function1.invoke(movingSubList));
                i3 += i2;
            }
            return arrayList;
        }
        ArrayList arrayList2 = new ArrayList();
        Iterator windowedIterator = SlidingWindowKt.windowedIterator(iterable.iterator(), i, i2, z, true);
        while (windowedIterator.hasNext()) {
            arrayList2.add(function1.invoke((List) windowedIterator.next()));
        }
        return arrayList2;
    }

    /* JADX WARN: Type inference failed for: r0v2, types: [T, java.lang.Object] */
    public static final <T> T last(List<? extends T> list, Function1<? super T, Boolean> function1) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            T previous = listIterator.previous();
            if (function1.invoke(previous).booleanValue()) {
                return previous;
            }
        }
        throw new NoSuchElementException("List contains no element matching the predicate.");
    }

    public static final <T> List<T> minus(Iterable<? extends T> iterable, Sequence<? extends T> sequence) {
        HashSet hashSet = SequencesKt___SequencesKt.toHashSet(sequence);
        if (hashSet.isEmpty()) {
            return toList(iterable);
        }
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (!hashSet.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    public static final <T> List<T> plus(Iterable<? extends T> iterable, Iterable<? extends T> iterable2) {
        if (iterable instanceof Collection) {
            return plus((Collection) iterable, (Iterable) iterable2);
        }
        ArrayList arrayList = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable2);
        return arrayList;
    }

    public static final <T, R> List<Pair<T, R>> zip(Iterable<? extends T> iterable, Iterable<? extends R> iterable2) {
        Iterator<? extends T> it = iterable.iterator();
        Iterator<? extends R> it2 = iterable2.iterator();
        ArrayList arrayList = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10), CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable2, 10)));
        while (it.hasNext() && it2.hasNext()) {
            arrayList.add(TuplesKt.to(it.next(), it2.next()));
        }
        return arrayList;
    }

    public static final <T extends Comparable<? super T>> T max(Iterable<? extends T> iterable) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                T next2 = it.next();
                if (next.compareTo(next2) < 0) {
                    next = next2;
                }
            }
            return next;
        }
        return null;
    }

    public static final <T extends Comparable<? super T>> T min(Iterable<? extends T> iterable) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                T next2 = it.next();
                if (next.compareTo(next2) > 0) {
                    next = next2;
                }
            }
            return next;
        }
        return null;
    }

    public static final <T> List<T> plus(Collection<? extends T> collection, Iterable<? extends T> iterable) {
        if (iterable instanceof Collection) {
            Collection collection2 = (Collection) iterable;
            ArrayList arrayList = new ArrayList(collection.size() + collection2.size());
            arrayList.addAll(collection);
            arrayList.addAll(collection2);
            return arrayList;
        }
        ArrayList arrayList2 = new ArrayList(collection);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList2, iterable);
        return arrayList2;
    }

    public static final <T> List<T> plus(Iterable<? extends T> iterable, Sequence<? extends T> sequence) {
        ArrayList arrayList = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, sequence);
        return arrayList;
    }

    public static final <T> List<T> plus(Collection<? extends T> collection, Sequence<? extends T> sequence) {
        ArrayList arrayList = new ArrayList(collection.size() + 10);
        arrayList.addAll(collection);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, sequence);
        return arrayList;
    }
}
